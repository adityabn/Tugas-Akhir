(function(window, angular, undefined) {'use strict';

var urlBase = "http://apibeta.svara.id:3000/api/";
var authHeader = 'authorization';

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "User",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Users/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__findById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__destroyById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__updateById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__get__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Queries accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/Users/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__create__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__delete__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__count__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Counts accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#create
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createMany
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#upsert
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Users",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#exists
         * @methodOf lbServices.User
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Users/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Users/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#find
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Users",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findOne
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Users/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#updateAll
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/Users/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#deleteById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/Users/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#count
         * @methodOf lbServices.User
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Users/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$updateAttributes
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Users/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createChangeStream
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/Users/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#login
         * @methodOf lbServices.User
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/accounts/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#logout
         * @methodOf lbServices.User
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/Users/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#confirm
         * @methodOf lbServices.User
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/Users/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#resetPassword
         * @methodOf lbServices.User
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/Users/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/Users" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.User#updateOrCreate
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.User#update
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.User#destroyById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#removeById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.User#modelName
    * @propertyOf lbServices.User
    * @description
    * The name of the model represented by this $resource,
    * i.e. `User`.
    */
    R.modelName = "User";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Playlist
 * @header lbServices.Playlist
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Playlist` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Playlist",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/playlists/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Playlist#create
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/playlists",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#createMany
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/playlists",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#find
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/playlists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#deleteById
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/playlists/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#prototype$updateAttributes
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/playlists/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#getDetail
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * View playlist details
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "getDetail": {
          url: urlBase + "/playlists/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#getContent
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * View playlist contents
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "getContent": {
          isArray: true,
          url: urlBase + "/playlists/:id/contents",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#addContent
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Add content to playlist by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `data` – `{object}` - 
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "addContent": {
          url: urlBase + "/playlists/:id/contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#findByGenre
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Get playlist data by genre
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `genre` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "findByGenre": {
          url: urlBase + "/playlists/:id/genre",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#findByArtist
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Get playlist data by artist
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `artist` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "findByArtist": {
          url: urlBase + "/playlists/:id/artist",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#findByAlbum
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Get playlist data by album
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `album` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        "findByAlbum": {
          url: urlBase + "/playlists/:id/album",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#favorite
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Favorite a playlist by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/playlists/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#unfavorite
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Unfavorite a playlist by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfavorite": {
          url: urlBase + "/playlists/favorite/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Playlist#share
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Share a playlist by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/playlists/share/:playlistId",
          method: "POST"
        },

        // INTERNAL. Use Account.playlists.findById() instead.
        "::findById::Account::playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.playlists.destroyById() instead.
        "::destroyById::Account::playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.playlists.updateById() instead.
        "::updateById::Account::playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.playlists() instead.
        "::get::Account::playlists": {
          isArray: true,
          url: urlBase + "/accounts/:id/playlists",
          method: "GET"
        },

        // INTERNAL. Use Account.playlists.create() instead.
        "::create::Account::playlists": {
          url: urlBase + "/accounts/:id/playlists",
          method: "POST"
        },

        // INTERNAL. Use Account.playlists.createMany() instead.
        "::createMany::Account::playlists": {
          isArray: true,
          url: urlBase + "/accounts/:id/playlists",
          method: "POST"
        },

        // INTERNAL. Use Account.playlists.destroyAll() instead.
        "::delete::Account::playlists": {
          url: urlBase + "/accounts/:id/playlists",
          method: "DELETE"
        },

        // INTERNAL. Use Account.playlists.count() instead.
        "::count::Account::playlists": {
          url: urlBase + "/accounts/:id/playlists/count",
          method: "GET"
        },

        // INTERNAL. Use Favorite.playlist() instead.
        "::get::Favorite::playlist": {
          url: urlBase + "/favorites/:id/playlist",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.playlist() instead.
        "::get::PlaylistContents::playlist": {
          url: urlBase + "/playlist_contents/:id/playlist",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Playlist#destroyById
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Playlist#removeById
         * @methodOf lbServices.Playlist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Playlist#modelName
    * @propertyOf lbServices.Playlist
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Playlist`.
    */
    R.modelName = "Playlist";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Mix
 * @header lbServices.Mix
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Mix` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Mix",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/mix/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Mix#create
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/mix",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#createMany
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/mix",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#findById
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/mix/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#find
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/mix",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#deleteById
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/mix/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#prototype$updateAttributes
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/mix/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#favorite
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Favorite a mix by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/mix/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#unfavorite
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Unfavorite a mix by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfavorite": {
          url: urlBase + "/mix/favorite/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Mix#share
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Share a mix by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/mix/share/:id",
          method: "POST"
        },

        // INTERNAL. Use Account.mixes.findById() instead.
        "::findById::Account::mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.mixes.destroyById() instead.
        "::destroyById::Account::mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.mixes.updateById() instead.
        "::updateById::Account::mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.mixes() instead.
        "::get::Account::mixes": {
          isArray: true,
          url: urlBase + "/accounts/:id/mixes",
          method: "GET"
        },

        // INTERNAL. Use Account.mixes.create() instead.
        "::create::Account::mixes": {
          url: urlBase + "/accounts/:id/mixes",
          method: "POST"
        },

        // INTERNAL. Use Account.mixes.createMany() instead.
        "::createMany::Account::mixes": {
          isArray: true,
          url: urlBase + "/accounts/:id/mixes",
          method: "POST"
        },

        // INTERNAL. Use Account.mixes.destroyAll() instead.
        "::delete::Account::mixes": {
          url: urlBase + "/accounts/:id/mixes",
          method: "DELETE"
        },

        // INTERNAL. Use Account.mixes.count() instead.
        "::count::Account::mixes": {
          url: urlBase + "/accounts/:id/mixes/count",
          method: "GET"
        },

        // INTERNAL. Use Favorite.mix() instead.
        "::get::Favorite::mix": {
          url: urlBase + "/favorites/:id/mix",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Mix#destroyById
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Mix#removeById
         * @methodOf lbServices.Mix
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Mix#modelName
    * @propertyOf lbServices.Mix
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Mix`.
    */
    R.modelName = "Mix";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Feed
 * @header lbServices.Feed
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Feed` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Feed",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/feeds/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Feed#find
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/feeds",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#deleteById
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/feeds/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#prototype$updateAttributes
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/feeds/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#getDetail
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * View feed details
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "getDetail": {
          url: urlBase + "/feeds/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#timeline
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Range query instance by id sorted by latest update
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "timeline": {
          isArray: true,
          url: urlBase + "/feeds/timeline",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#getLikes
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * View feed likes
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "getLikes": {
          isArray: true,
          url: urlBase + "/feeds/likes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#createLike
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Like a feed by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "createLike": {
          url: urlBase + "/feeds/likes/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#deleteLike
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Unlike liked feed by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "deleteLike": {
          url: urlBase + "/feeds/likes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#share
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Share feed content
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "share": {
          url: urlBase + "/feeds/share/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#searchByCaption
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Search feed by caption
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `term` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{*=}` - 
         */
        "searchByCaption": {
          url: urlBase + "/feeds/search/:term",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#getComments
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * View feed comments
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "getComments": {
          isArray: true,
          url: urlBase + "/feeds/comments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#createComment
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Comment a feed by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "createComment": {
          url: urlBase + "/feeds/comments/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#editComment
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Edit a feed comment by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `commentId` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "editComment": {
          url: urlBase + "/feeds/comments/:commentId",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Feed#deleteComment
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Delete a feed comment by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `commentId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        "deleteComment": {
          url: urlBase + "/feeds/comments/:commentId",
          method: "DELETE"
        },

        // INTERNAL. Use Content.feeds() instead.
        "::get::Content::feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use Content.feeds.create() instead.
        "::create::Content::feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Content.feeds.createMany() instead.
        "::createMany::Content::feeds": {
          isArray: true,
          url: urlBase + "/contents/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Content.feeds.update() instead.
        "::update::Content::feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "PUT"
        },

        // INTERNAL. Use Content.feeds.destroy() instead.
        "::destroy::Content::feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use Account.feeds.findById() instead.
        "::findById::Account::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.feeds.destroyById() instead.
        "::destroyById::Account::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.feeds.updateById() instead.
        "::updateById::Account::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedFeed.findById() instead.
        "::findById::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed.destroyById() instead.
        "::destroyById::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.updateById() instead.
        "::updateById::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedFeed.link() instead.
        "::link::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedFeed.unlink() instead.
        "::unlink::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.exists() instead.
        "::exists::Account::likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.feeds() instead.
        "::get::Account::feeds": {
          isArray: true,
          url: urlBase + "/accounts/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use Account.feeds.create() instead.
        "::create::Account::feeds": {
          url: urlBase + "/accounts/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Account.feeds.createMany() instead.
        "::createMany::Account::feeds": {
          isArray: true,
          url: urlBase + "/accounts/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Account.feeds.destroyAll() instead.
        "::delete::Account::feeds": {
          url: urlBase + "/accounts/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use Account.feeds.count() instead.
        "::count::Account::feeds": {
          url: urlBase + "/accounts/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed() instead.
        "::get::Account::likedFeed": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedFeed",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed.create() instead.
        "::create::Account::likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed",
          method: "POST"
        },

        // INTERNAL. Use Account.likedFeed.createMany() instead.
        "::createMany::Account::likedFeed": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedFeed",
          method: "POST"
        },

        // INTERNAL. Use Account.likedFeed.destroyAll() instead.
        "::delete::Account::likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.count() instead.
        "::count::Account::likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed/count",
          method: "GET"
        },

        // INTERNAL. Use Notification.feed() instead.
        "::get::Notification::feed": {
          url: urlBase + "/Notifications/:id/feed",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Feed#destroyById
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Feed#removeById
         * @methodOf lbServices.Feed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Feed#modelName
    * @propertyOf lbServices.Feed
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Feed`.
    */
    R.modelName = "Feed";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Content
 * @header lbServices.Content
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Content` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Content",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/contents/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Content.feeds() instead.
        "prototype$__get__feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use Content.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Content.feeds.update() instead.
        "prototype$__update__feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "PUT"
        },

        // INTERNAL. Use Content.feeds.destroy() instead.
        "prototype$__destroy__feeds": {
          url: urlBase + "/contents/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use Content.radioContent() instead.
        "prototype$__get__radioContent": {
          url: urlBase + "/contents/:id/radioContent",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.findById() instead.
        "prototype$__findById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.destroyById() instead.
        "prototype$__destroyById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.updateById() instead.
        "prototype$__updateById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Content.favorites.link() instead.
        "prototype$__link__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Content.favorites.unlink() instead.
        "prototype$__unlink__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.exists() instead.
        "prototype$__exists__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Content.upload() instead.
        "prototype$__get__upload": {
          url: urlBase + "/contents/:id/upload",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites() instead.
        "prototype$__get__favorites": {
          isArray: true,
          url: urlBase + "/contents/:id/favorites",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.create() instead.
        "prototype$__create__favorites": {
          url: urlBase + "/contents/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Content.favorites.destroyAll() instead.
        "prototype$__delete__favorites": {
          url: urlBase + "/contents/:id/favorites",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.count() instead.
        "prototype$__count__favorites": {
          url: urlBase + "/contents/:id/favorites/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#create
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#createMany
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#upsert
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/contents",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#exists
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/contents/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#findById
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/contents/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#find
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/contents",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#findOne
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/contents/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#updateAll
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/contents/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#deleteById
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/contents/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#count
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/contents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#prototype$updateAttributes
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/contents/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#createChangeStream
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/contents/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#favorite
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Favorite content by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "favorite": {
          url: urlBase + "/contents/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Content#share
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Share a content by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `contentId` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/contents/share/:contentId",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Content#updateOrCreate
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Content#update
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Content#destroyById
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Content#removeById
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Content` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Content#modelName
    * @propertyOf lbServices.Content
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Content`.
    */
    R.modelName = "Content";

    /**
     * @ngdoc object
     * @name lbServices.Content.feeds
     * @header lbServices.Content.feeds
     * @object
     * @description
     *
     * The object `Content.feeds` groups methods
     * manipulating `Feed` instances related to `Content`.
     *
     * Call {@link lbServices.Content#feeds Content.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Content#feeds
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Fetches hasOne relation feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::get::Content::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.feeds#create
         * @methodOf lbServices.Content.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::create::Content::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.feeds#createMany
         * @methodOf lbServices.Content.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::createMany::Content::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.feeds#destroy
         * @methodOf lbServices.Content.feeds
         *
         * @description
         *
         * Deletes feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroy = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::destroy::Content::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.feeds#update
         * @methodOf lbServices.Content.feeds
         *
         * @description
         *
         * Update feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.update = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::update::Content::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content#radioContent
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Fetches belongsTo relation radioContent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContent = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::get::Content::radioContent"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Content.favorites
     * @header lbServices.Content.favorites
     * @object
     * @description
     *
     * The object `Content.favorites` groups methods
     * manipulating `Account` instances related to `Content`.
     *
     * Call {@link lbServices.Content#favorites Content.favorites()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Content#favorites
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Queries favorites of Content.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#count
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Counts favorites of Content.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.favorites.count = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::count::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#create
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Creates a new instance in favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.create = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::create::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#createMany
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Creates a new instance in favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.createMany = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::createMany::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#destroyAll
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Deletes all favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.favorites.destroyAll = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::delete::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#destroyById
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Delete a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.favorites.destroyById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::destroyById::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#exists
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Check the existence of favorites relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.exists = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::exists::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#findById
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Find a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.findById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::findById::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#link
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Add a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.link = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::link::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#unlink
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Remove the favorites relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.favorites.unlink = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::unlink::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content.favorites#updateById
         * @methodOf lbServices.Content.favorites
         *
         * @description
         *
         * Update a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.favorites.updateById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::updateById::Content::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Content#upload
         * @methodOf lbServices.Content
         *
         * @description
         *
         * Fetches belongsTo relation upload.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.upload = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::get::Content::upload"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Artist
 * @header lbServices.Artist
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Artist` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Artist",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/artists/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Artist#create
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/artists",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#createMany
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/artists",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#findById
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/artists/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#find
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/artists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#deleteById
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/artists/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#prototype$updateAttributes
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/artists/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Artist#favorite
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Favorite an artist by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/artists/favorite/:id",
          method: "POST"
        },

        // INTERNAL. Use Favorite.artist() instead.
        "::get::Favorite::artist": {
          url: urlBase + "/favorites/:id/artist",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Artist#destroyById
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Artist#removeById
         * @methodOf lbServices.Artist
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Artist#modelName
    * @propertyOf lbServices.Artist
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Artist`.
    */
    R.modelName = "Artist";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Album
 * @header lbServices.Album
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Album` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Album",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/albums/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Album#create
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/albums",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#createMany
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/albums",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#findById
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/albums/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#find
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/albums",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#deleteById
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/albums/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#prototype$updateAttributes
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/albums/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Album#favorite
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Favorite an album by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/albums/favorite/:id",
          method: "POST"
        },

        // INTERNAL. Use Favorite.album() instead.
        "::get::Favorite::album": {
          url: urlBase + "/favorites/:id/album",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Album#destroyById
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Album#removeById
         * @methodOf lbServices.Album
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Album#modelName
    * @propertyOf lbServices.Album
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Album`.
    */
    R.modelName = "Album";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Music
 * @header lbServices.Music
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Music` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Music",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/musics/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Music#create
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/musics",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#createMany
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/musics",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#findById
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/musics/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#find
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/musics",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#deleteById
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/musics/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#prototype$updateAttributes
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/musics/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#findByGenre
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find music by genre
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `genre` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "findByGenre": {
          isArray: true,
          url: urlBase + "/musics/by/genre",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#findByArtist
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find music by artist
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `artist` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "findByArtist": {
          isArray: true,
          url: urlBase + "/musics/by/artist",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#findByAlbum
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find music by album
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `album` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "findByAlbum": {
          isArray: true,
          url: urlBase + "/musics/by/album",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#findByCategory
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Find music by category
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `category` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        "findByCategory": {
          isArray: true,
          url: urlBase + "/musics/by/category",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#favorite
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Favorite a music by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/musics/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#unfavorite
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Unfavorite a music by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfavorite": {
          url: urlBase + "/musics/favorite/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Music#share
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Share a content by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/musics/share/:id",
          method: "POST"
        },

        // INTERNAL. Use Account.musics.findById() instead.
        "::findById::Account::musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.musics.destroyById() instead.
        "::destroyById::Account::musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.musics.updateById() instead.
        "::updateById::Account::musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.musics() instead.
        "::get::Account::musics": {
          isArray: true,
          url: urlBase + "/accounts/:id/musics",
          method: "GET"
        },

        // INTERNAL. Use Account.musics.create() instead.
        "::create::Account::musics": {
          url: urlBase + "/accounts/:id/musics",
          method: "POST"
        },

        // INTERNAL. Use Account.musics.createMany() instead.
        "::createMany::Account::musics": {
          isArray: true,
          url: urlBase + "/accounts/:id/musics",
          method: "POST"
        },

        // INTERNAL. Use Account.musics.destroyAll() instead.
        "::delete::Account::musics": {
          url: urlBase + "/accounts/:id/musics",
          method: "DELETE"
        },

        // INTERNAL. Use Account.musics.count() instead.
        "::count::Account::musics": {
          url: urlBase + "/accounts/:id/musics/count",
          method: "GET"
        },

        // INTERNAL. Use Favorite.music() instead.
        "::get::Favorite::music": {
          url: urlBase + "/favorites/:id/music",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.music() instead.
        "::get::PlaylistContents::music": {
          url: urlBase + "/playlist_contents/:id/music",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Music#destroyById
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Music#removeById
         * @methodOf lbServices.Music
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Music#modelName
    * @propertyOf lbServices.Music
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Music`.
    */
    R.modelName = "Music";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.RadioContent
 * @header lbServices.RadioContent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RadioContent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "RadioContent",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/radio_contents/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#create
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/radio_contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#createMany
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/radio_contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#findById
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/radio_contents/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#find
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/radio_contents",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#deleteById
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/radio_contents/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#prototype$updateAttributes
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/radio_contents/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#findByCategory
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Find radio content by category
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `category` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        "findByCategory": {
          isArray: true,
          url: urlBase + "/radio_contents/by/category",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#favorite
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Favorite a radio content by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/radio_contents/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#unfavorite
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Unfavorite a radio content by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfavorite": {
          url: urlBase + "/radio_contents/favorite/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#share
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Share a content by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/radio_contents/share/:id",
          method: "POST"
        },

        // INTERNAL. Use Content.radioContent() instead.
        "::get::Content::radioContent": {
          url: urlBase + "/contents/:id/radioContent",
          method: "GET"
        },

        // INTERNAL. Use Radio.radioContents.findById() instead.
        "::findById::Radio::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.radioContents.destroyById() instead.
        "::destroyById::Radio::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.radioContents.updateById() instead.
        "::updateById::Radio::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.radioContents() instead.
        "::get::Radio::radioContents": {
          isArray: true,
          url: urlBase + "/radios/:id/radioContents",
          method: "GET"
        },

        // INTERNAL. Use Radio.radioContents.create() instead.
        "::create::Radio::radioContents": {
          url: urlBase + "/radios/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Radio.radioContents.createMany() instead.
        "::createMany::Radio::radioContents": {
          isArray: true,
          url: urlBase + "/radios/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Radio.radioContents.destroyAll() instead.
        "::delete::Radio::radioContents": {
          url: urlBase + "/radios/:id/radioContents",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.radioContents.count() instead.
        "::count::Radio::radioContents": {
          url: urlBase + "/radios/:id/radioContents/count",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents.findById() instead.
        "::findById::Account::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents.destroyById() instead.
        "::destroyById::Account::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioContents.updateById() instead.
        "::updateById::Account::radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioContents() instead.
        "::get::Account::radioContents": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioContents",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents.create() instead.
        "::create::Account::radioContents": {
          url: urlBase + "/accounts/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Account.radioContents.createMany() instead.
        "::createMany::Account::radioContents": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Account.radioContents.destroyAll() instead.
        "::delete::Account::radioContents": {
          url: urlBase + "/accounts/:id/radioContents",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioContents.count() instead.
        "::count::Account::radioContents": {
          url: urlBase + "/accounts/:id/radioContents/count",
          method: "GET"
        },

        // INTERNAL. Use Favorite.radioContent() instead.
        "::get::Favorite::radioContent": {
          url: urlBase + "/favorites/:id/radioContent",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.radioContent() instead.
        "::get::PlaylistContents::radioContent": {
          url: urlBase + "/playlist_contents/:id/radioContent",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.RadioContent#destroyById
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.RadioContent#removeById
         * @methodOf lbServices.RadioContent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.RadioContent#modelName
    * @propertyOf lbServices.RadioContent
    * @description
    * The name of the model represented by this $resource,
    * i.e. `RadioContent`.
    */
    R.modelName = "RadioContent";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Radio
 * @header lbServices.Radio
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Radio` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Radio",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/radios/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Radio.radioContents.findById() instead.
        "prototype$__findById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.radioContents.destroyById() instead.
        "prototype$__destroyById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.radioContents.updateById() instead.
        "prototype$__updateById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/radioContents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.programs.findById() instead.
        "prototype$__findById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.programs.destroyById() instead.
        "prototype$__destroyById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.programs.updateById() instead.
        "prototype$__updateById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.dJs.findById() instead.
        "prototype$__findById__dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.dJs.destroyById() instead.
        "prototype$__destroyById__dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.dJs.updateById() instead.
        "prototype$__updateById__dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.rundowns.findById() instead.
        "prototype$__findById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.rundowns.destroyById() instead.
        "prototype$__destroyById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.rundowns.updateById() instead.
        "prototype$__updateById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.requests.findById() instead.
        "prototype$__findById__requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.requests.destroyById() instead.
        "prototype$__destroyById__requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.requests.updateById() instead.
        "prototype$__updateById__requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.likes.link() instead.
        "prototype$__link__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.likes.unlink() instead.
        "prototype$__unlink__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.exists() instead.
        "prototype$__exists__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Radio.members.findById() instead.
        "prototype$__findById__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.members.destroyById() instead.
        "prototype$__destroyById__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.updateById() instead.
        "prototype$__updateById__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.members.link() instead.
        "prototype$__link__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.members.unlink() instead.
        "prototype$__unlink__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.exists() instead.
        "prototype$__exists__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Radio.radioContents() instead.
        "prototype$__get__radioContents": {
          isArray: true,
          url: urlBase + "/radios/:id/radioContents",
          method: "GET"
        },

        // INTERNAL. Use Radio.radioContents.create() instead.
        "prototype$__create__radioContents": {
          url: urlBase + "/radios/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Radio.radioContents.destroyAll() instead.
        "prototype$__delete__radioContents": {
          url: urlBase + "/radios/:id/radioContents",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.radioContents.count() instead.
        "prototype$__count__radioContents": {
          url: urlBase + "/radios/:id/radioContents/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.programs() instead.
        "prototype$__get__programs": {
          isArray: true,
          url: urlBase + "/radios/:id/programs",
          method: "GET"
        },

        // INTERNAL. Use Radio.programs.create() instead.
        "prototype$__create__programs": {
          url: urlBase + "/radios/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Radio.programs.destroyAll() instead.
        "prototype$__delete__programs": {
          url: urlBase + "/radios/:id/programs",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.programs.count() instead.
        "prototype$__count__programs": {
          url: urlBase + "/radios/:id/programs/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.dJs() instead.
        "prototype$__get__dJs": {
          isArray: true,
          url: urlBase + "/radios/:id/dJs",
          method: "GET"
        },

        // INTERNAL. Use Radio.dJs.create() instead.
        "prototype$__create__dJs": {
          url: urlBase + "/radios/:id/dJs",
          method: "POST"
        },

        // INTERNAL. Use Radio.dJs.destroyAll() instead.
        "prototype$__delete__dJs": {
          url: urlBase + "/radios/:id/dJs",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.dJs.count() instead.
        "prototype$__count__dJs": {
          url: urlBase + "/radios/:id/dJs/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.rundowns() instead.
        "prototype$__get__rundowns": {
          isArray: true,
          url: urlBase + "/radios/:id/rundowns",
          method: "GET"
        },

        // INTERNAL. Use Radio.rundowns.create() instead.
        "prototype$__create__rundowns": {
          url: urlBase + "/radios/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Radio.rundowns.destroyAll() instead.
        "prototype$__delete__rundowns": {
          url: urlBase + "/radios/:id/rundowns",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.rundowns.count() instead.
        "prototype$__count__rundowns": {
          url: urlBase + "/radios/:id/rundowns/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.requests() instead.
        "prototype$__get__requests": {
          isArray: true,
          url: urlBase + "/radios/:id/requests",
          method: "GET"
        },

        // INTERNAL. Use Radio.requests.create() instead.
        "prototype$__create__requests": {
          url: urlBase + "/radios/:id/requests",
          method: "POST"
        },

        // INTERNAL. Use Radio.requests.destroyAll() instead.
        "prototype$__delete__requests": {
          url: urlBase + "/radios/:id/requests",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.requests.count() instead.
        "prototype$__count__requests": {
          url: urlBase + "/radios/:id/requests/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/radios/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/radios/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Radio.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/radios/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/radios/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.members() instead.
        "prototype$__get__members": {
          isArray: true,
          url: urlBase + "/radios/:id/members",
          method: "GET"
        },

        // INTERNAL. Use Radio.members.create() instead.
        "prototype$__create__members": {
          url: urlBase + "/radios/:id/members",
          method: "POST"
        },

        // INTERNAL. Use Radio.members.destroyAll() instead.
        "prototype$__delete__members": {
          url: urlBase + "/radios/:id/members",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.count() instead.
        "prototype$__count__members": {
          url: urlBase + "/radios/:id/members/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#create
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/radios",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#createMany
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/radios",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#upsert
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/radios",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#exists
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/radios/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#findById
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/radios/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#find
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/radios",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#findOne
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/radios/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#updateAll
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/radios/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#deleteById
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/radios/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#count
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/radios/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#prototype$updateAttributes
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/radios/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#createChangeStream
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/radios/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#postProgram
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Create new radio program
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `radioId` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "postProgram": {
          url: urlBase + "/radios/:radioId/programs/",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#getPrograms
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Get list of radio programs
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `radioId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "getPrograms": {
          url: urlBase + "/radios/:radioId/programs/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#getLikes
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * View radio likes
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `radioId` – `{string}` - 
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getLikes": {
          url: urlBase + "/radios/likes/:radioId",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#like
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Like a radio by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `radioId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "like": {
          url: urlBase + "/radios/likes/:radioId",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#unlike
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Unlike liked radio by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `radioId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "unlike": {
          url: urlBase + "/radios/likes/:radioId",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#getJoin
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Get membership status for a specific radio
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `radioId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "getJoin": {
          url: urlBase + "/radios/:radioId/join/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#postJoin
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Join radio by id
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `radioId` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "postJoin": {
          url: urlBase + "/radios/:radioId/join/",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Radio#deleteJoin
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Quit radio by id
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `radioId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "deleteJoin": {
          url: urlBase + "/radios/:radioId/join/",
          method: "DELETE"
        },

        // INTERNAL. Use Program.radio() instead.
        "::get::Program::radio": {
          url: urlBase + "/programs/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use DJ.radio() instead.
        "::get::DJ::radio": {
          url: urlBase + "/djs/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Rundown.radio() instead.
        "::get::Rundown::radio": {
          url: urlBase + "/rundowns/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Request.radio() instead.
        "::get::Request::radio": {
          url: urlBase + "/requests/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Account.radio() instead.
        "::get::Account::radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Account.radio.create() instead.
        "::create::Account::radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "POST"
        },

        // INTERNAL. Use Account.radio.createMany() instead.
        "::createMany::Account::radio": {
          isArray: true,
          url: urlBase + "/accounts/:id/radio",
          method: "POST"
        },

        // INTERNAL. Use Account.radio.update() instead.
        "::update::Account::radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "PUT"
        },

        // INTERNAL. Use Account.radio.destroy() instead.
        "::destroy::Account::radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.findById() instead.
        "::findById::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.likedRadio.destroyById() instead.
        "::destroyById::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.updateById() instead.
        "::updateById::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedRadio.link() instead.
        "::link::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedRadio.unlink() instead.
        "::unlink::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.exists() instead.
        "::exists::Account::likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.radioMemberships.findById() instead.
        "::findById::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships.destroyById() instead.
        "::destroyById::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.updateById() instead.
        "::updateById::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioMemberships.link() instead.
        "::link::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioMemberships.unlink() instead.
        "::unlink::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.exists() instead.
        "::exists::Account::radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.likedRadio() instead.
        "::get::Account::likedRadio": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedRadio",
          method: "GET"
        },

        // INTERNAL. Use Account.likedRadio.create() instead.
        "::create::Account::likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio",
          method: "POST"
        },

        // INTERNAL. Use Account.likedRadio.createMany() instead.
        "::createMany::Account::likedRadio": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedRadio",
          method: "POST"
        },

        // INTERNAL. Use Account.likedRadio.destroyAll() instead.
        "::delete::Account::likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.count() instead.
        "::count::Account::likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio/count",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships() instead.
        "::get::Account::radioMemberships": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships.create() instead.
        "::create::Account::radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "POST"
        },

        // INTERNAL. Use Account.radioMemberships.createMany() instead.
        "::createMany::Account::radioMemberships": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "POST"
        },

        // INTERNAL. Use Account.radioMemberships.destroyAll() instead.
        "::delete::Account::radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.count() instead.
        "::count::Account::radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships/count",
          method: "GET"
        },

        // INTERNAL. Use RadioLike.radio() instead.
        "::get::RadioLike::radio": {
          url: urlBase + "/radiolikes/:id/radio",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Radio#updateOrCreate
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Radio#update
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Radio#destroyById
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Radio#removeById
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Radio#modelName
    * @propertyOf lbServices.Radio
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Radio`.
    */
    R.modelName = "Radio";

    /**
     * @ngdoc object
     * @name lbServices.Radio.radioContents
     * @header lbServices.Radio.radioContents
     * @object
     * @description
     *
     * The object `Radio.radioContents` groups methods
     * manipulating `RadioContent` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#radioContents Radio.radioContents()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#radioContents
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries radioContents of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::get::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#count
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Counts radioContents of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.radioContents.count = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::count::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#create
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Creates a new instance in radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.create = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::create::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#createMany
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Creates a new instance in radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.createMany = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::createMany::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#destroyAll
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Deletes all radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioContents.destroyAll = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::delete::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#destroyById
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Delete a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioContents.destroyById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::destroyById::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#findById
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Find a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.findById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::findById::Radio::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.radioContents#updateById
         * @methodOf lbServices.Radio.radioContents
         *
         * @description
         *
         * Update a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.updateById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::updateById::Radio::radioContents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.programs
     * @header lbServices.Radio.programs
     * @object
     * @description
     *
     * The object `Radio.programs` groups methods
     * manipulating `Program` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#programs Radio.programs()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#programs
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries programs of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#count
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Counts programs of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.programs.count = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::count::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#create
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Creates a new instance in programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.create = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::create::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#createMany
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Creates a new instance in programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.createMany = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::createMany::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#destroyAll
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Deletes all programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.programs.destroyAll = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::delete::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#destroyById
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Delete a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.programs.destroyById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::destroyById::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#findById
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Find a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.findById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::findById::Radio::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.programs#updateById
         * @methodOf lbServices.Radio.programs
         *
         * @description
         *
         * Update a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.updateById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::updateById::Radio::programs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.dJs
     * @header lbServices.Radio.dJs
     * @object
     * @description
     *
     * The object `Radio.dJs` groups methods
     * manipulating `DJ` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#dJs Radio.dJs()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#dJs
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries dJs of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R.dJs = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::get::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#count
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Counts dJs of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.dJs.count = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::count::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#create
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Creates a new instance in dJs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R.dJs.create = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::create::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#createMany
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Creates a new instance in dJs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R.dJs.createMany = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::createMany::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#destroyAll
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Deletes all dJs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.dJs.destroyAll = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::delete::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#destroyById
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Delete a related item by id for dJs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for dJs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.dJs.destroyById = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::destroyById::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#findById
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Find a related item by id for dJs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for dJs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R.dJs.findById = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::findById::Radio::dJs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.dJs#updateById
         * @methodOf lbServices.Radio.dJs
         *
         * @description
         *
         * Update a related item by id for dJs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for dJs
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R.dJs.updateById = function() {
          var TargetResource = $injector.get("DJ");
          var action = TargetResource["::updateById::Radio::dJs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.rundowns
     * @header lbServices.Radio.rundowns
     * @object
     * @description
     *
     * The object `Radio.rundowns` groups methods
     * manipulating `Rundown` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#rundowns Radio.rundowns()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#rundowns
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries rundowns of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::get::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#count
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Counts rundowns of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.rundowns.count = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::count::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#create
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Creates a new instance in rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.create = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::create::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#createMany
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Creates a new instance in rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.createMany = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::createMany::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#destroyAll
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Deletes all rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.rundowns.destroyAll = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::delete::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#destroyById
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Delete a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.rundowns.destroyById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::destroyById::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#findById
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Find a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.findById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::findById::Radio::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.rundowns#updateById
         * @methodOf lbServices.Radio.rundowns
         *
         * @description
         *
         * Update a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.updateById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::updateById::Radio::rundowns"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.requests
     * @header lbServices.Radio.requests
     * @object
     * @description
     *
     * The object `Radio.requests` groups methods
     * manipulating `Request` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#requests Radio.requests()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#requests
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries requests of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R.requests = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::get::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#count
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Counts requests of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.requests.count = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::count::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#create
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Creates a new instance in requests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R.requests.create = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::create::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#createMany
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Creates a new instance in requests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R.requests.createMany = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::createMany::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#destroyAll
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Deletes all requests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.requests.destroyAll = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::delete::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#destroyById
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Delete a related item by id for requests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for requests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.requests.destroyById = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::destroyById::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#findById
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Find a related item by id for requests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for requests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R.requests.findById = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::findById::Radio::requests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.requests#updateById
         * @methodOf lbServices.Radio.requests
         *
         * @description
         *
         * Update a related item by id for requests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for requests
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R.requests.updateById = function() {
          var TargetResource = $injector.get("Request");
          var action = TargetResource["::updateById::Radio::requests"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.likes
     * @header lbServices.Radio.likes
     * @object
     * @description
     *
     * The object `Radio.likes` groups methods
     * manipulating `Account` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#likes Radio.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#likes
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries likes of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#count
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Counts likes of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::count::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#create
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::create::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#createMany
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::createMany::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#destroyAll
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::delete::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#destroyById
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::destroyById::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#exists
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Check the existence of likes relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.exists = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::exists::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#findById
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::findById::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#link
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Add a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.link = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::link::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#unlink
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Remove the likes relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.unlink = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::unlink::Radio::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.likes#updateById
         * @methodOf lbServices.Radio.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::updateById::Radio::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Radio.members
     * @header lbServices.Radio.members
     * @object
     * @description
     *
     * The object `Radio.members` groups methods
     * manipulating `Account` instances related to `Radio`.
     *
     * Call {@link lbServices.Radio#members Radio.members()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Radio#members
         * @methodOf lbServices.Radio
         *
         * @description
         *
         * Queries members of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#count
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Counts members of Radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.members.count = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::count::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#create
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Creates a new instance in members of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.create = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::create::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#createMany
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Creates a new instance in members of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.createMany = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::createMany::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#destroyAll
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Deletes all members of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.members.destroyAll = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::delete::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#destroyById
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Delete a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.members.destroyById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::destroyById::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#exists
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Check the existence of members relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.exists = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::exists::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#findById
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Find a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.findById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::findById::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#link
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Add a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.link = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::link::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#unlink
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Remove the members relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.members.unlink = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::unlink::Radio::members"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Radio.members#updateById
         * @methodOf lbServices.Radio.members
         *
         * @description
         *
         * Update a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.members.updateById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::updateById::Radio::members"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Program
 * @header lbServices.Program
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Program` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Program",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/programs/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Program.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/programs/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.findById() instead.
        "prototype$__findById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.destroyById() instead.
        "prototype$__destroyById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.rundowns.updateById() instead.
        "prototype$__updateById__rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.ratings.findById() instead.
        "prototype$__findById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings.destroyById() instead.
        "prototype$__destroyById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.updateById() instead.
        "prototype$__updateById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.ratings.link() instead.
        "prototype$__link__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.ratings.unlink() instead.
        "prototype$__unlink__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.exists() instead.
        "prototype$__exists__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Program.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.announcers.findById() instead.
        "prototype$__findById__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.announcers.destroyById() instead.
        "prototype$__destroyById__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.updateById() instead.
        "prototype$__updateById__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.announcers.link() instead.
        "prototype$__link__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.announcers.unlink() instead.
        "prototype$__unlink__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.exists() instead.
        "prototype$__exists__announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Program.rundowns() instead.
        "prototype$__get__rundowns": {
          isArray: true,
          url: urlBase + "/programs/:id/rundowns",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.create() instead.
        "prototype$__create__rundowns": {
          url: urlBase + "/programs/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Program.rundowns.destroyAll() instead.
        "prototype$__delete__rundowns": {
          url: urlBase + "/programs/:id/rundowns",
          method: "DELETE"
        },

        // INTERNAL. Use Program.rundowns.count() instead.
        "prototype$__count__rundowns": {
          url: urlBase + "/programs/:id/rundowns/count",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings() instead.
        "prototype$__get__ratings": {
          isArray: true,
          url: urlBase + "/programs/:id/ratings",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings.create() instead.
        "prototype$__create__ratings": {
          url: urlBase + "/programs/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Program.ratings.destroyAll() instead.
        "prototype$__delete__ratings": {
          url: urlBase + "/programs/:id/ratings",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.count() instead.
        "prototype$__count__ratings": {
          url: urlBase + "/programs/:id/ratings/count",
          method: "GET"
        },

        // INTERNAL. Use Program.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/programs/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Program.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/programs/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Program.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/programs/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Program.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/programs/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Program.announcers() instead.
        "prototype$__get__announcers": {
          isArray: true,
          url: urlBase + "/programs/:id/announcers",
          method: "GET"
        },

        // INTERNAL. Use Program.announcers.create() instead.
        "prototype$__create__announcers": {
          url: urlBase + "/programs/:id/announcers",
          method: "POST"
        },

        // INTERNAL. Use Program.announcers.destroyAll() instead.
        "prototype$__delete__announcers": {
          url: urlBase + "/programs/:id/announcers",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.count() instead.
        "prototype$__count__announcers": {
          url: urlBase + "/programs/:id/announcers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#create
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/programs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#createMany
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/programs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#upsert
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/programs",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#exists
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/programs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#findById
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/programs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#find
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/programs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#findOne
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/programs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#updateAll
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/programs/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#deleteById
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/programs/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#count
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/programs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#prototype$updateAttributes
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/programs/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#createChangeStream
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/programs/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#getPrograms
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Get all programs
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "getPrograms": {
          isArray: true,
          url: urlBase + "/programs/program",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#getProgramById
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Get program by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "getProgramById": {
          url: urlBase + "/programs/program/:programId",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#readAllRatings
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Get all programs' rating
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "readAllRatings": {
          isArray: true,
          url: urlBase + "/programs/rating",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#readRating
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Get program rating
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{number=}` - 
         */
        "readRating": {
          url: urlBase + "/programs/rating/:programId",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#createRating
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Rate a program by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `rating` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "createRating": {
          url: urlBase + "/programs/rating/:programId",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#updateRating
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Edit program rate by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `newRating` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "updateRating": {
          url: urlBase + "/programs/rating/:programId",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#deleteRating
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Unrate program by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "deleteRating": {
          url: urlBase + "/programs/rating/:programId",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#readComments
         * @methodOf lbServices.Program
         *
         * @description
         *
         * View program comments
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{*=}` - 
         */
        "readComments": {
          url: urlBase + "/programs/comment/:programId",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#createComment
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Comment a program by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "createComment": {
          url: urlBase + "/programs/comment/:programId",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#getAnnouncers
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Get program's announcers
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        "getAnnouncers": {
          isArray: true,
          url: urlBase + "/programs/announcer/:programId",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#addAnnouncer
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Add an announcer to program
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `announcerId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "addAnnouncer": {
          url: urlBase + "/programs/announcer/:programId/:announcerId",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Program#deleteAnnouncer
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Delete an announcer from program
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `programId` – `{string}` - 
         *
         *  - `announcerId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{string=}` - 
         */
        "deleteAnnouncer": {
          url: urlBase + "/programs/announcer/:programId/:announcerId",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.programs.findById() instead.
        "::findById::Radio::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.programs.destroyById() instead.
        "::destroyById::Radio::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.programs.updateById() instead.
        "::updateById::Radio::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/programs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.programs() instead.
        "::get::Radio::programs": {
          isArray: true,
          url: urlBase + "/radios/:id/programs",
          method: "GET"
        },

        // INTERNAL. Use Radio.programs.create() instead.
        "::create::Radio::programs": {
          url: urlBase + "/radios/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Radio.programs.createMany() instead.
        "::createMany::Radio::programs": {
          isArray: true,
          url: urlBase + "/radios/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Radio.programs.destroyAll() instead.
        "::delete::Radio::programs": {
          url: urlBase + "/radios/:id/programs",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.programs.count() instead.
        "::count::Radio::programs": {
          url: urlBase + "/radios/:id/programs/count",
          method: "GET"
        },

        // INTERNAL. Use Rundown.program() instead.
        "::get::Rundown::program": {
          url: urlBase + "/rundowns/:id/program",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings.findById() instead.
        "::findById::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings.destroyById() instead.
        "::destroyById::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.updateById() instead.
        "::updateById::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.ratings.link() instead.
        "::link::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.ratings.unlink() instead.
        "::unlink::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.exists() instead.
        "::exists::Account::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.ratings() instead.
        "::get::Account::ratings": {
          isArray: true,
          url: urlBase + "/accounts/:id/ratings",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings.create() instead.
        "::create::Account::ratings": {
          url: urlBase + "/accounts/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Account.ratings.createMany() instead.
        "::createMany::Account::ratings": {
          isArray: true,
          url: urlBase + "/accounts/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Account.ratings.destroyAll() instead.
        "::delete::Account::ratings": {
          url: urlBase + "/accounts/:id/ratings",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.count() instead.
        "::count::Account::ratings": {
          url: urlBase + "/accounts/:id/ratings/count",
          method: "GET"
        },

        // INTERNAL. Use Rating.program() instead.
        "::get::Rating::program": {
          url: urlBase + "/ratings/:id/program",
          method: "GET"
        },

        // INTERNAL. Use ProgramComment.program() instead.
        "::get::ProgramComment::program": {
          url: urlBase + "/programcomments/:id/program",
          method: "GET"
        },

        // INTERNAL. Use Announcer.programs.findById() instead.
        "::findById::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Announcer.programs.destroyById() instead.
        "::destroyById::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.updateById() instead.
        "::updateById::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Announcer.programs.link() instead.
        "::link::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Announcer.programs.unlink() instead.
        "::unlink::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.exists() instead.
        "::exists::Announcer::programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Announcer.programs() instead.
        "::get::Announcer::programs": {
          isArray: true,
          url: urlBase + "/announcers/:id/programs",
          method: "GET"
        },

        // INTERNAL. Use Announcer.programs.create() instead.
        "::create::Announcer::programs": {
          url: urlBase + "/announcers/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Announcer.programs.createMany() instead.
        "::createMany::Announcer::programs": {
          isArray: true,
          url: urlBase + "/announcers/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Announcer.programs.destroyAll() instead.
        "::delete::Announcer::programs": {
          url: urlBase + "/announcers/:id/programs",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.count() instead.
        "::count::Announcer::programs": {
          url: urlBase + "/announcers/:id/programs/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Program#updateOrCreate
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Program#update
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Program#destroyById
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Program#removeById
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Program#modelName
    * @propertyOf lbServices.Program
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Program`.
    */
    R.modelName = "Program";


        /**
         * @ngdoc method
         * @name lbServices.Program#radio
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Fetches belongsTo relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Program::radio"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Program.rundowns
     * @header lbServices.Program.rundowns
     * @object
     * @description
     *
     * The object `Program.rundowns` groups methods
     * manipulating `Rundown` instances related to `Program`.
     *
     * Call {@link lbServices.Program#rundowns Program.rundowns()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Program#rundowns
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Queries rundowns of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::get::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#count
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Counts rundowns of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.rundowns.count = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::count::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#create
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Creates a new instance in rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.create = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::create::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#createMany
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Creates a new instance in rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.createMany = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::createMany::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#destroyAll
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Deletes all rundowns of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.rundowns.destroyAll = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::delete::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#destroyById
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Delete a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.rundowns.destroyById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::destroyById::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#findById
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Find a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.findById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::findById::Program::rundowns"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.rundowns#updateById
         * @methodOf lbServices.Program.rundowns
         *
         * @description
         *
         * Update a related item by id for rundowns.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for rundowns
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R.rundowns.updateById = function() {
          var TargetResource = $injector.get("Rundown");
          var action = TargetResource["::updateById::Program::rundowns"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Program.ratings
     * @header lbServices.Program.ratings
     * @object
     * @description
     *
     * The object `Program.ratings` groups methods
     * manipulating `Account` instances related to `Program`.
     *
     * Call {@link lbServices.Program#ratings Program.ratings()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Program#ratings
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Queries ratings of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#count
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Counts ratings of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.ratings.count = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::count::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#create
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Creates a new instance in ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.create = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::create::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#createMany
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Creates a new instance in ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.createMany = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::createMany::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#destroyAll
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Deletes all ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.destroyAll = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::delete::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#destroyById
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Delete a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.destroyById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::destroyById::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#exists
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Check the existence of ratings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.exists = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::exists::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#findById
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Find a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.findById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::findById::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#link
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Add a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.link = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::link::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#unlink
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Remove the ratings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.unlink = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::unlink::Program::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.ratings#updateById
         * @methodOf lbServices.Program.ratings
         *
         * @description
         *
         * Update a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.ratings.updateById = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::updateById::Program::ratings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Program.comments
     * @header lbServices.Program.comments
     * @object
     * @description
     *
     * The object `Program.comments` groups methods
     * manipulating `ProgramComment` instances related to `Program`.
     *
     * Call {@link lbServices.Program#comments Program.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Program#comments
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Queries comments of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::get::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#count
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Counts comments of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::count::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#create
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::create::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#createMany
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::createMany::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#destroyAll
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::delete::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#destroyById
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::destroyById::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#findById
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::findById::Program::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.comments#updateById
         * @methodOf lbServices.Program.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("ProgramComment");
          var action = TargetResource["::updateById::Program::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Program.announcers
     * @header lbServices.Program.announcers
     * @object
     * @description
     *
     * The object `Program.announcers` groups methods
     * manipulating `Announcer` instances related to `Program`.
     *
     * Call {@link lbServices.Program#announcers Program.announcers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Program#announcers
         * @methodOf lbServices.Program
         *
         * @description
         *
         * Queries announcers of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::get::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#count
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Counts announcers of Program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.announcers.count = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::count::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#create
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Creates a new instance in announcers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.create = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::create::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#createMany
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Creates a new instance in announcers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.createMany = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::createMany::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#destroyAll
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Deletes all announcers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.announcers.destroyAll = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::delete::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#destroyById
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Delete a related item by id for announcers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.announcers.destroyById = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::destroyById::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#exists
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Check the existence of announcers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.exists = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::exists::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#findById
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Find a related item by id for announcers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.findById = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::findById::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#link
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Add a related item by id for announcers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.link = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::link::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#unlink
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Remove the announcers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.announcers.unlink = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::unlink::Program::announcers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Program.announcers#updateById
         * @methodOf lbServices.Program.announcers
         *
         * @description
         *
         * Update a related item by id for announcers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for announcers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R.announcers.updateById = function() {
          var TargetResource = $injector.get("Announcer");
          var action = TargetResource["::updateById::Program::announcers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DJ
 * @header lbServices.DJ
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DJ` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DJ",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/djs/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DJ.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/djs/:id/radio",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#create
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/djs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#createMany
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/djs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#upsert
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/djs",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#exists
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/djs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#findById
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/djs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#find
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/djs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#findOne
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/djs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#updateAll
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/djs/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#deleteById
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/djs/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#count
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/djs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#prototype$updateAttributes
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/djs/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DJ#createChangeStream
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/djs/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Radio.dJs.findById() instead.
        "::findById::Radio::dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.dJs.destroyById() instead.
        "::destroyById::Radio::dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.dJs.updateById() instead.
        "::updateById::Radio::dJs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/dJs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.dJs() instead.
        "::get::Radio::dJs": {
          isArray: true,
          url: urlBase + "/radios/:id/dJs",
          method: "GET"
        },

        // INTERNAL. Use Radio.dJs.create() instead.
        "::create::Radio::dJs": {
          url: urlBase + "/radios/:id/dJs",
          method: "POST"
        },

        // INTERNAL. Use Radio.dJs.createMany() instead.
        "::createMany::Radio::dJs": {
          isArray: true,
          url: urlBase + "/radios/:id/dJs",
          method: "POST"
        },

        // INTERNAL. Use Radio.dJs.destroyAll() instead.
        "::delete::Radio::dJs": {
          url: urlBase + "/radios/:id/dJs",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.dJs.count() instead.
        "::count::Radio::dJs": {
          url: urlBase + "/radios/:id/dJs/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DJ#updateOrCreate
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DJ#update
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DJ#destroyById
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DJ#removeById
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DJ` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DJ#modelName
    * @propertyOf lbServices.DJ
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DJ`.
    */
    R.modelName = "DJ";


        /**
         * @ngdoc method
         * @name lbServices.DJ#radio
         * @methodOf lbServices.DJ
         *
         * @description
         *
         * Fetches belongsTo relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::DJ::radio"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Rundown
 * @header lbServices.Rundown
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Rundown` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Rundown",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/rundowns/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Rundown.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/rundowns/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Rundown.program() instead.
        "prototype$__get__program": {
          url: urlBase + "/rundowns/:id/program",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#create
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/rundowns",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#createMany
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/rundowns",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#upsert
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/rundowns",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#exists
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/rundowns/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#findById
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/rundowns/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#find
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/rundowns",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#findOne
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/rundowns/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#updateAll
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/rundowns/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#deleteById
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/rundowns/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#count
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/rundowns/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#prototype$updateAttributes
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/rundowns/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rundown#createChangeStream
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/rundowns/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Radio.rundowns.findById() instead.
        "::findById::Radio::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.rundowns.destroyById() instead.
        "::destroyById::Radio::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.rundowns.updateById() instead.
        "::updateById::Radio::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/rundowns/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.rundowns() instead.
        "::get::Radio::rundowns": {
          isArray: true,
          url: urlBase + "/radios/:id/rundowns",
          method: "GET"
        },

        // INTERNAL. Use Radio.rundowns.create() instead.
        "::create::Radio::rundowns": {
          url: urlBase + "/radios/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Radio.rundowns.createMany() instead.
        "::createMany::Radio::rundowns": {
          isArray: true,
          url: urlBase + "/radios/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Radio.rundowns.destroyAll() instead.
        "::delete::Radio::rundowns": {
          url: urlBase + "/radios/:id/rundowns",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.rundowns.count() instead.
        "::count::Radio::rundowns": {
          url: urlBase + "/radios/:id/rundowns/count",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.findById() instead.
        "::findById::Program::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.destroyById() instead.
        "::destroyById::Program::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.rundowns.updateById() instead.
        "::updateById::Program::rundowns": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/rundowns/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.rundowns() instead.
        "::get::Program::rundowns": {
          isArray: true,
          url: urlBase + "/programs/:id/rundowns",
          method: "GET"
        },

        // INTERNAL. Use Program.rundowns.create() instead.
        "::create::Program::rundowns": {
          url: urlBase + "/programs/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Program.rundowns.createMany() instead.
        "::createMany::Program::rundowns": {
          isArray: true,
          url: urlBase + "/programs/:id/rundowns",
          method: "POST"
        },

        // INTERNAL. Use Program.rundowns.destroyAll() instead.
        "::delete::Program::rundowns": {
          url: urlBase + "/programs/:id/rundowns",
          method: "DELETE"
        },

        // INTERNAL. Use Program.rundowns.count() instead.
        "::count::Program::rundowns": {
          url: urlBase + "/programs/:id/rundowns/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Rundown#updateOrCreate
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Rundown#update
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Rundown#destroyById
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Rundown#removeById
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rundown` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Rundown#modelName
    * @propertyOf lbServices.Rundown
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Rundown`.
    */
    R.modelName = "Rundown";


        /**
         * @ngdoc method
         * @name lbServices.Rundown#radio
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Fetches belongsTo relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Rundown::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Rundown#program
         * @methodOf lbServices.Rundown
         *
         * @description
         *
         * Fetches belongsTo relation program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.program = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::Rundown::program"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Request
 * @header lbServices.Request
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Request` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Request",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/requests/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Request.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/requests/:id/radio",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#create
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/requests",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#createMany
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/requests",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#upsert
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/requests",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#exists
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/requests/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#findById
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/requests/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#find
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/requests",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#findOne
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/requests/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#updateAll
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/requests/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#deleteById
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/requests/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#count
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/requests/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#prototype$updateAttributes
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/requests/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Request#createChangeStream
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/requests/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Radio.requests.findById() instead.
        "::findById::Radio::requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.requests.destroyById() instead.
        "::destroyById::Radio::requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.requests.updateById() instead.
        "::updateById::Radio::requests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/requests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.requests() instead.
        "::get::Radio::requests": {
          isArray: true,
          url: urlBase + "/radios/:id/requests",
          method: "GET"
        },

        // INTERNAL. Use Radio.requests.create() instead.
        "::create::Radio::requests": {
          url: urlBase + "/radios/:id/requests",
          method: "POST"
        },

        // INTERNAL. Use Radio.requests.createMany() instead.
        "::createMany::Radio::requests": {
          isArray: true,
          url: urlBase + "/radios/:id/requests",
          method: "POST"
        },

        // INTERNAL. Use Radio.requests.destroyAll() instead.
        "::delete::Radio::requests": {
          url: urlBase + "/radios/:id/requests",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.requests.count() instead.
        "::count::Radio::requests": {
          url: urlBase + "/radios/:id/requests/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Request#updateOrCreate
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Request#update
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Request#destroyById
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Request#removeById
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Request` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Request#modelName
    * @propertyOf lbServices.Request
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Request`.
    */
    R.modelName = "Request";


        /**
         * @ngdoc method
         * @name lbServices.Request#radio
         * @methodOf lbServices.Request
         *
         * @description
         *
         * Fetches belongsTo relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Request::radio"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Follower
 * @header lbServices.Follower
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Follower` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Follower",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/followers/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Follower.follower() instead.
        "prototype$__get__follower": {
          url: urlBase + "/followers/:id/follower",
          method: "GET"
        },

        // INTERNAL. Use Follower.followed() instead.
        "prototype$__get__followed": {
          url: urlBase + "/followers/:id/followed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#create
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/followers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#createMany
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/followers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#upsert
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/followers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#exists
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/followers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#findById
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/followers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#find
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/followers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#findOne
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/followers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#updateAll
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/followers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#deleteById
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/followers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#count
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/followers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#prototype$updateAttributes
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/followers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Follower#createChangeStream
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/followers/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Account.followers.findById() instead.
        "::findById::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.followers.destroyById() instead.
        "::destroyById::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.updateById() instead.
        "::updateById::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.followers.link() instead.
        "::link::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.followers.unlink() instead.
        "::unlink::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.exists() instead.
        "::exists::Account::followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.followers() instead.
        "::get::Account::followers": {
          isArray: true,
          url: urlBase + "/accounts/:id/followers",
          method: "GET"
        },

        // INTERNAL. Use Account.followers.create() instead.
        "::create::Account::followers": {
          url: urlBase + "/accounts/:id/followers",
          method: "POST"
        },

        // INTERNAL. Use Account.followers.createMany() instead.
        "::createMany::Account::followers": {
          isArray: true,
          url: urlBase + "/accounts/:id/followers",
          method: "POST"
        },

        // INTERNAL. Use Account.followers.destroyAll() instead.
        "::delete::Account::followers": {
          url: urlBase + "/accounts/:id/followers",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.count() instead.
        "::count::Account::followers": {
          url: urlBase + "/accounts/:id/followers/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Follower#updateOrCreate
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Follower#update
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Follower#destroyById
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Follower#removeById
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Follower#modelName
    * @propertyOf lbServices.Follower
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Follower`.
    */
    R.modelName = "Follower";


        /**
         * @ngdoc method
         * @name lbServices.Follower#follower
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Fetches belongsTo relation follower.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.follower = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Follower::follower"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Follower#followed
         * @methodOf lbServices.Follower
         *
         * @description
         *
         * Fetches belongsTo relation followed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.followed = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Follower::followed"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Account
 * @header lbServices.Account
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Account` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Account",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/accounts/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__findById__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__destroyById__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__updateById__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/accessTokens/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.playlists.findById() instead.
        "prototype$__findById__playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.playlists.destroyById() instead.
        "prototype$__destroyById__playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.playlists.updateById() instead.
        "prototype$__updateById__playlists": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/playlists/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.mixes.findById() instead.
        "prototype$__findById__mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.mixes.destroyById() instead.
        "prototype$__destroyById__mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.mixes.updateById() instead.
        "prototype$__updateById__mixes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/mixes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.musics.findById() instead.
        "prototype$__findById__musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.musics.destroyById() instead.
        "prototype$__destroyById__musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.musics.updateById() instead.
        "prototype$__updateById__musics": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/musics/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioContents.findById() instead.
        "prototype$__findById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents.destroyById() instead.
        "prototype$__destroyById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioContents.updateById() instead.
        "prototype$__updateById__radioContents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioContents/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__findById__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find a related item by id for feedComments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feedComments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__findById__feedComments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feedComments/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__destroyById__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a related item by id for feedComments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feedComments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__feedComments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feedComments/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__updateById__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update a related item by id for feedComments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feedComments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__updateById__feedComments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feedComments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.feeds.findById() instead.
        "prototype$__findById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.feeds.destroyById() instead.
        "prototype$__destroyById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.feeds.updateById() instead.
        "prototype$__updateById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/feeds/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__findById__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find a related item by id for followings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__findById__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__destroyById__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a related item by id for followings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__updateById__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update a related item by id for followings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__updateById__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__link__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Add a related item by id for followings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__link__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__unlink__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Remove the followings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__exists__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Check the existence of followings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__exists__followings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followings/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.followers.findById() instead.
        "prototype$__findById__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.followers.destroyById() instead.
        "prototype$__destroyById__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.updateById() instead.
        "prototype$__updateById__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.followers.link() instead.
        "prototype$__link__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.followers.unlink() instead.
        "prototype$__unlink__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.exists() instead.
        "prototype$__exists__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/followers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.likedFeed.findById() instead.
        "prototype$__findById__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed.destroyById() instead.
        "prototype$__destroyById__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.updateById() instead.
        "prototype$__updateById__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedFeed.link() instead.
        "prototype$__link__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedFeed.unlink() instead.
        "prototype$__unlink__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.exists() instead.
        "prototype$__exists__likedFeed": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedFeed/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use Account.radio.create() instead.
        "prototype$__create__radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "POST"
        },

        // INTERNAL. Use Account.radio.update() instead.
        "prototype$__update__radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "PUT"
        },

        // INTERNAL. Use Account.radio.destroy() instead.
        "prototype$__destroy__radio": {
          url: urlBase + "/accounts/:id/radio",
          method: "DELETE"
        },

        // INTERNAL. Use Account.favorites.findById() instead.
        "prototype$__findById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.favorites.destroyById() instead.
        "prototype$__destroyById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.favorites.updateById() instead.
        "prototype$__updateById__favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.notifications.findById() instead.
        "prototype$__findById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.notifications.destroyById() instead.
        "prototype$__destroyById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.notifications.updateById() instead.
        "prototype$__updateById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.uploads.findById() instead.
        "prototype$__findById__uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads.destroyById() instead.
        "prototype$__destroyById__uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.uploads.updateById() instead.
        "prototype$__updateById__uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.setting() instead.
        "prototype$__get__setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "GET"
        },

        // INTERNAL. Use Account.setting.create() instead.
        "prototype$__create__setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "POST"
        },

        // INTERNAL. Use Account.setting.update() instead.
        "prototype$__update__setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "PUT"
        },

        // INTERNAL. Use Account.setting.destroy() instead.
        "prototype$__destroy__setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.findById() instead.
        "prototype$__findById__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.likedRadio.destroyById() instead.
        "prototype$__destroyById__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.updateById() instead.
        "prototype$__updateById__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedRadio.link() instead.
        "prototype$__link__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.likedRadio.unlink() instead.
        "prototype$__unlink__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.exists() instead.
        "prototype$__exists__likedRadio": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/likedRadio/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.radioMemberships.findById() instead.
        "prototype$__findById__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships.destroyById() instead.
        "prototype$__destroyById__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.updateById() instead.
        "prototype$__updateById__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioMemberships.link() instead.
        "prototype$__link__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.radioMemberships.unlink() instead.
        "prototype$__unlink__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.exists() instead.
        "prototype$__exists__radioMemberships": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/radioMemberships/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Account.ratings.findById() instead.
        "prototype$__findById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings.destroyById() instead.
        "prototype$__destroyById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.updateById() instead.
        "prototype$__updateById__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.ratings.link() instead.
        "prototype$__link__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.ratings.unlink() instead.
        "prototype$__unlink__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.exists() instead.
        "prototype$__exists__ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/ratings/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__get__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries accessTokens of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/accounts/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__create__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/accounts/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__delete__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/accounts/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__count__accessTokens
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Counts accessTokens of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/accounts/:id/accessTokens/count",
          method: "GET"
        },

        // INTERNAL. Use Account.playlists() instead.
        "prototype$__get__playlists": {
          isArray: true,
          url: urlBase + "/accounts/:id/playlists",
          method: "GET"
        },

        // INTERNAL. Use Account.playlists.create() instead.
        "prototype$__create__playlists": {
          url: urlBase + "/accounts/:id/playlists",
          method: "POST"
        },

        // INTERNAL. Use Account.playlists.destroyAll() instead.
        "prototype$__delete__playlists": {
          url: urlBase + "/accounts/:id/playlists",
          method: "DELETE"
        },

        // INTERNAL. Use Account.playlists.count() instead.
        "prototype$__count__playlists": {
          url: urlBase + "/accounts/:id/playlists/count",
          method: "GET"
        },

        // INTERNAL. Use Account.mixes() instead.
        "prototype$__get__mixes": {
          isArray: true,
          url: urlBase + "/accounts/:id/mixes",
          method: "GET"
        },

        // INTERNAL. Use Account.mixes.create() instead.
        "prototype$__create__mixes": {
          url: urlBase + "/accounts/:id/mixes",
          method: "POST"
        },

        // INTERNAL. Use Account.mixes.destroyAll() instead.
        "prototype$__delete__mixes": {
          url: urlBase + "/accounts/:id/mixes",
          method: "DELETE"
        },

        // INTERNAL. Use Account.mixes.count() instead.
        "prototype$__count__mixes": {
          url: urlBase + "/accounts/:id/mixes/count",
          method: "GET"
        },

        // INTERNAL. Use Account.musics() instead.
        "prototype$__get__musics": {
          isArray: true,
          url: urlBase + "/accounts/:id/musics",
          method: "GET"
        },

        // INTERNAL. Use Account.musics.create() instead.
        "prototype$__create__musics": {
          url: urlBase + "/accounts/:id/musics",
          method: "POST"
        },

        // INTERNAL. Use Account.musics.destroyAll() instead.
        "prototype$__delete__musics": {
          url: urlBase + "/accounts/:id/musics",
          method: "DELETE"
        },

        // INTERNAL. Use Account.musics.count() instead.
        "prototype$__count__musics": {
          url: urlBase + "/accounts/:id/musics/count",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents() instead.
        "prototype$__get__radioContents": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioContents",
          method: "GET"
        },

        // INTERNAL. Use Account.radioContents.create() instead.
        "prototype$__create__radioContents": {
          url: urlBase + "/accounts/:id/radioContents",
          method: "POST"
        },

        // INTERNAL. Use Account.radioContents.destroyAll() instead.
        "prototype$__delete__radioContents": {
          url: urlBase + "/accounts/:id/radioContents",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioContents.count() instead.
        "prototype$__count__radioContents": {
          url: urlBase + "/accounts/:id/radioContents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__get__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries feedComments of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__get__feedComments": {
          isArray: true,
          url: urlBase + "/accounts/:id/feedComments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__create__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Creates a new instance in feedComments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__create__feedComments": {
          url: urlBase + "/accounts/:id/feedComments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__delete__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Deletes all feedComments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__feedComments": {
          url: urlBase + "/accounts/:id/feedComments",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__count__feedComments
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Counts feedComments of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__feedComments": {
          url: urlBase + "/accounts/:id/feedComments/count",
          method: "GET"
        },

        // INTERNAL. Use Account.feeds() instead.
        "prototype$__get__feeds": {
          isArray: true,
          url: urlBase + "/accounts/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use Account.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/accounts/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use Account.feeds.destroyAll() instead.
        "prototype$__delete__feeds": {
          url: urlBase + "/accounts/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use Account.feeds.count() instead.
        "prototype$__count__feeds": {
          url: urlBase + "/accounts/:id/feeds/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__get__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries followings of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__get__followings": {
          isArray: true,
          url: urlBase + "/accounts/:id/followings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__create__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Creates a new instance in followings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$__create__followings": {
          url: urlBase + "/accounts/:id/followings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__delete__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Deletes all followings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__followings": {
          url: urlBase + "/accounts/:id/followings",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$__count__followings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Counts followings of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__followings": {
          url: urlBase + "/accounts/:id/followings/count",
          method: "GET"
        },

        // INTERNAL. Use Account.followers() instead.
        "prototype$__get__followers": {
          isArray: true,
          url: urlBase + "/accounts/:id/followers",
          method: "GET"
        },

        // INTERNAL. Use Account.followers.create() instead.
        "prototype$__create__followers": {
          url: urlBase + "/accounts/:id/followers",
          method: "POST"
        },

        // INTERNAL. Use Account.followers.destroyAll() instead.
        "prototype$__delete__followers": {
          url: urlBase + "/accounts/:id/followers",
          method: "DELETE"
        },

        // INTERNAL. Use Account.followers.count() instead.
        "prototype$__count__followers": {
          url: urlBase + "/accounts/:id/followers/count",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed() instead.
        "prototype$__get__likedFeed": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedFeed",
          method: "GET"
        },

        // INTERNAL. Use Account.likedFeed.create() instead.
        "prototype$__create__likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed",
          method: "POST"
        },

        // INTERNAL. Use Account.likedFeed.destroyAll() instead.
        "prototype$__delete__likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedFeed.count() instead.
        "prototype$__count__likedFeed": {
          url: urlBase + "/accounts/:id/likedFeed/count",
          method: "GET"
        },

        // INTERNAL. Use Account.favorites() instead.
        "prototype$__get__favorites": {
          isArray: true,
          url: urlBase + "/accounts/:id/favorites",
          method: "GET"
        },

        // INTERNAL. Use Account.favorites.create() instead.
        "prototype$__create__favorites": {
          url: urlBase + "/accounts/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Account.favorites.destroyAll() instead.
        "prototype$__delete__favorites": {
          url: urlBase + "/accounts/:id/favorites",
          method: "DELETE"
        },

        // INTERNAL. Use Account.favorites.count() instead.
        "prototype$__count__favorites": {
          url: urlBase + "/accounts/:id/favorites/count",
          method: "GET"
        },

        // INTERNAL. Use Account.notifications() instead.
        "prototype$__get__notifications": {
          isArray: true,
          url: urlBase + "/accounts/:id/notifications",
          method: "GET"
        },

        // INTERNAL. Use Account.notifications.create() instead.
        "prototype$__create__notifications": {
          url: urlBase + "/accounts/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use Account.notifications.destroyAll() instead.
        "prototype$__delete__notifications": {
          url: urlBase + "/accounts/:id/notifications",
          method: "DELETE"
        },

        // INTERNAL. Use Account.notifications.count() instead.
        "prototype$__count__notifications": {
          url: urlBase + "/accounts/:id/notifications/count",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads() instead.
        "prototype$__get__uploads": {
          isArray: true,
          url: urlBase + "/accounts/:id/uploads",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads.create() instead.
        "prototype$__create__uploads": {
          url: urlBase + "/accounts/:id/uploads",
          method: "POST"
        },

        // INTERNAL. Use Account.uploads.destroyAll() instead.
        "prototype$__delete__uploads": {
          url: urlBase + "/accounts/:id/uploads",
          method: "DELETE"
        },

        // INTERNAL. Use Account.uploads.count() instead.
        "prototype$__count__uploads": {
          url: urlBase + "/accounts/:id/uploads/count",
          method: "GET"
        },

        // INTERNAL. Use Account.likedRadio() instead.
        "prototype$__get__likedRadio": {
          isArray: true,
          url: urlBase + "/accounts/:id/likedRadio",
          method: "GET"
        },

        // INTERNAL. Use Account.likedRadio.create() instead.
        "prototype$__create__likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio",
          method: "POST"
        },

        // INTERNAL. Use Account.likedRadio.destroyAll() instead.
        "prototype$__delete__likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio",
          method: "DELETE"
        },

        // INTERNAL. Use Account.likedRadio.count() instead.
        "prototype$__count__likedRadio": {
          url: urlBase + "/accounts/:id/likedRadio/count",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships() instead.
        "prototype$__get__radioMemberships": {
          isArray: true,
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "GET"
        },

        // INTERNAL. Use Account.radioMemberships.create() instead.
        "prototype$__create__radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "POST"
        },

        // INTERNAL. Use Account.radioMemberships.destroyAll() instead.
        "prototype$__delete__radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships",
          method: "DELETE"
        },

        // INTERNAL. Use Account.radioMemberships.count() instead.
        "prototype$__count__radioMemberships": {
          url: urlBase + "/accounts/:id/radioMemberships/count",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings() instead.
        "prototype$__get__ratings": {
          isArray: true,
          url: urlBase + "/accounts/:id/ratings",
          method: "GET"
        },

        // INTERNAL. Use Account.ratings.create() instead.
        "prototype$__create__ratings": {
          url: urlBase + "/accounts/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Account.ratings.destroyAll() instead.
        "prototype$__delete__ratings": {
          url: urlBase + "/accounts/:id/ratings",
          method: "DELETE"
        },

        // INTERNAL. Use Account.ratings.count() instead.
        "prototype$__count__ratings": {
          url: urlBase + "/accounts/:id/ratings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#create
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/accounts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#createMany
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/accounts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#upsert
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/accounts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#exists
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/accounts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#findById
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/accounts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#find
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/accounts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#findOne
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/accounts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#updateAll
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/accounts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#deleteById
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/accounts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#count
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/accounts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#prototype$updateAttributes
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/accounts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#createChangeStream
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/accounts/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#login
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/accounts/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#logout
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/accounts/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#confirm
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/accounts/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#resetPassword
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/accounts/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getAccountStats
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get user statistics
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "getAccountStats": {
          url: urlBase + "/accounts/:id/stats",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#follow
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Follow current authenticated user to another user
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "follow": {
          url: urlBase + "/accounts/following/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#unfollow
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Unfollow current authenticated user from another user
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfollow": {
          url: urlBase + "/accounts/following/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#followingCount
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Returns the number of follower for current user
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "followingCount": {
          url: urlBase + "/accounts/following/preview",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFollowings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get all user followed by current user
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "getFollowings": {
          url: urlBase + "/accounts/following/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#searchFollowings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Search all user followed by current user,whose username matched search term
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `term` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "searchFollowings": {
          url: urlBase + "/accounts/following/:term",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#followerCount
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Returns the number of followed user by current user
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "followerCount": {
          url: urlBase + "/accounts/follower/preview",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFollowers
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get all user following current user
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFollowers": {
          url: urlBase + "/accounts/follower/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#searchFollowers
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Search all user following current user by username
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `term` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "searchFollowers": {
          url: urlBase + "/accounts/follower/:term",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavorites
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite contents
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavorites": {
          url: urlBase + "/accounts/favorites/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesMusic
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite musics
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesMusic": {
          url: urlBase + "/accounts/favorites/music/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesRadioContent
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite radio contents
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesRadioContent": {
          url: urlBase + "/accounts/favorites/radio_content",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesPlaylist
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite playlists
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesPlaylist": {
          url: urlBase + "/accounts/favorites/playlist",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesMix
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite mix
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesMix": {
          url: urlBase + "/accounts/favorites/mix",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesArtist
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite artists
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesArtist": {
          url: urlBase + "/accounts/favorites/artist",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getFavoritesAlbum
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get current user's favorite albums
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number=}` - 
         *
         *  - `take` – `{number=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getFavoritesAlbum": {
          url: urlBase + "/accounts/favorites/album",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getNotifications
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get user's notifications
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number}` - 
         *
         *  - `limit` – `{number}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getNotifications": {
          url: urlBase + "/accounts/notifications/",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getConfiguration
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get account setting
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "getConfiguration": {
          url: urlBase + "/accounts/setting",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#updateConfiguration
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update account setting
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{object=}` - 
         */
        "updateConfiguration": {
          url: urlBase + "/accounts/setting",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getMemberships
         * @methodOf lbServices.Account
         *
         * @description
         *
         * List account memberships
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         *
         *  - `result` – `{*=}` - 
         */
        "getMemberships": {
          url: urlBase + "/accounts/memberships",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#timeline
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Range query instance by id sorted by latest update
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `offset` – `{number}` - 
         *
         *  - `take` – `{number}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        "timeline": {
          isArray: true,
          url: urlBase + "/accounts/timeline",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.findById() instead.
        "::findById::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.destroyById() instead.
        "::destroyById::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.updateById() instead.
        "::updateById::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Content.favorites.link() instead.
        "::link::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Content.favorites.unlink() instead.
        "::unlink::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.exists() instead.
        "::exists::Content::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/contents/:id/favorites/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Content.favorites() instead.
        "::get::Content::favorites": {
          isArray: true,
          url: urlBase + "/contents/:id/favorites",
          method: "GET"
        },

        // INTERNAL. Use Content.favorites.create() instead.
        "::create::Content::favorites": {
          url: urlBase + "/contents/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Content.favorites.createMany() instead.
        "::createMany::Content::favorites": {
          isArray: true,
          url: urlBase + "/contents/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Content.favorites.destroyAll() instead.
        "::delete::Content::favorites": {
          url: urlBase + "/contents/:id/favorites",
          method: "DELETE"
        },

        // INTERNAL. Use Content.favorites.count() instead.
        "::count::Content::favorites": {
          url: urlBase + "/contents/:id/favorites/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes.findById() instead.
        "::findById::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes.destroyById() instead.
        "::destroyById::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.updateById() instead.
        "::updateById::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.likes.link() instead.
        "::link::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.likes.unlink() instead.
        "::unlink::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.exists() instead.
        "::exists::Radio::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/likes/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Radio.members.findById() instead.
        "::findById::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "GET"
        },

        // INTERNAL. Use Radio.members.destroyById() instead.
        "::destroyById::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.updateById() instead.
        "::updateById::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.members.link() instead.
        "::link::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Radio.members.unlink() instead.
        "::unlink::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.exists() instead.
        "::exists::Radio::members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/radios/:id/members/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Radio.likes() instead.
        "::get::Radio::likes": {
          isArray: true,
          url: urlBase + "/radios/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Radio.likes.create() instead.
        "::create::Radio::likes": {
          url: urlBase + "/radios/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Radio.likes.createMany() instead.
        "::createMany::Radio::likes": {
          isArray: true,
          url: urlBase + "/radios/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Radio.likes.destroyAll() instead.
        "::delete::Radio::likes": {
          url: urlBase + "/radios/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.likes.count() instead.
        "::count::Radio::likes": {
          url: urlBase + "/radios/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Radio.members() instead.
        "::get::Radio::members": {
          isArray: true,
          url: urlBase + "/radios/:id/members",
          method: "GET"
        },

        // INTERNAL. Use Radio.members.create() instead.
        "::create::Radio::members": {
          url: urlBase + "/radios/:id/members",
          method: "POST"
        },

        // INTERNAL. Use Radio.members.createMany() instead.
        "::createMany::Radio::members": {
          isArray: true,
          url: urlBase + "/radios/:id/members",
          method: "POST"
        },

        // INTERNAL. Use Radio.members.destroyAll() instead.
        "::delete::Radio::members": {
          url: urlBase + "/radios/:id/members",
          method: "DELETE"
        },

        // INTERNAL. Use Radio.members.count() instead.
        "::count::Radio::members": {
          url: urlBase + "/radios/:id/members/count",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings.findById() instead.
        "::findById::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings.destroyById() instead.
        "::destroyById::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.updateById() instead.
        "::updateById::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.ratings.link() instead.
        "::link::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.ratings.unlink() instead.
        "::unlink::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.exists() instead.
        "::exists::Program::ratings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/ratings/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Program.ratings() instead.
        "::get::Program::ratings": {
          isArray: true,
          url: urlBase + "/programs/:id/ratings",
          method: "GET"
        },

        // INTERNAL. Use Program.ratings.create() instead.
        "::create::Program::ratings": {
          url: urlBase + "/programs/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Program.ratings.createMany() instead.
        "::createMany::Program::ratings": {
          isArray: true,
          url: urlBase + "/programs/:id/ratings",
          method: "POST"
        },

        // INTERNAL. Use Program.ratings.destroyAll() instead.
        "::delete::Program::ratings": {
          url: urlBase + "/programs/:id/ratings",
          method: "DELETE"
        },

        // INTERNAL. Use Program.ratings.count() instead.
        "::count::Program::ratings": {
          url: urlBase + "/programs/:id/ratings/count",
          method: "GET"
        },

        // INTERNAL. Use Follower.follower() instead.
        "::get::Follower::follower": {
          url: urlBase + "/followers/:id/follower",
          method: "GET"
        },

        // INTERNAL. Use Follower.followed() instead.
        "::get::Follower::followed": {
          url: urlBase + "/followers/:id/followed",
          method: "GET"
        },

        // INTERNAL. Use Favorite.account() instead.
        "::get::Favorite::account": {
          url: urlBase + "/favorites/:id/account",
          method: "GET"
        },

        // INTERNAL. Use Notification.account() instead.
        "::get::Notification::account": {
          url: urlBase + "/Notifications/:id/account",
          method: "GET"
        },

        // INTERNAL. Use AccountSetting.account() instead.
        "::get::AccountSetting::account": {
          url: urlBase + "/settings/:id/account",
          method: "GET"
        },

        // INTERNAL. Use RadioLike.account() instead.
        "::get::RadioLike::account": {
          url: urlBase + "/radiolikes/:id/account",
          method: "GET"
        },

        // INTERNAL. Use Rating.account() instead.
        "::get::Rating::account": {
          url: urlBase + "/ratings/:id/account",
          method: "GET"
        },

        // INTERNAL. Use ProgramComment.account() instead.
        "::get::ProgramComment::account": {
          url: urlBase + "/programcomments/:id/account",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Account#getCurrent
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/accounts" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Account#updateOrCreate
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Account#update
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Account#destroyById
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Account#removeById
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Account#getCachedCurrent
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Account#login} or
         * {@link lbServices.Account#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Account instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Account#isAuthenticated
         * @methodOf lbServices.Account
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Account#getCurrentId
         * @methodOf lbServices.Account
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.Account#modelName
    * @propertyOf lbServices.Account
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Account`.
    */
    R.modelName = "Account";

    /**
     * @ngdoc object
     * @name lbServices.Account.playlists
     * @header lbServices.Account.playlists
     * @object
     * @description
     *
     * The object `Account.playlists` groups methods
     * manipulating `Playlist` instances related to `Account`.
     *
     * Call {@link lbServices.Account#playlists Account.playlists()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#playlists
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries playlists of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlists = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::get::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#count
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Counts playlists of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.playlists.count = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::count::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#create
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Creates a new instance in playlists of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlists.create = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::create::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#createMany
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Creates a new instance in playlists of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlists.createMany = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::createMany::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#destroyAll
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Deletes all playlists of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.playlists.destroyAll = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::delete::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#destroyById
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Delete a related item by id for playlists.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for playlists
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.playlists.destroyById = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::destroyById::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#findById
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Find a related item by id for playlists.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for playlists
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlists.findById = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::findById::Account::playlists"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.playlists#updateById
         * @methodOf lbServices.Account.playlists
         *
         * @description
         *
         * Update a related item by id for playlists.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for playlists
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlists.updateById = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::updateById::Account::playlists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.mixes
     * @header lbServices.Account.mixes
     * @object
     * @description
     *
     * The object `Account.mixes` groups methods
     * manipulating `Mix` instances related to `Account`.
     *
     * Call {@link lbServices.Account#mixes Account.mixes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#mixes
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries mixes of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mixes = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::get::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#count
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Counts mixes of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.mixes.count = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::count::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#create
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Creates a new instance in mixes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mixes.create = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::create::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#createMany
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Creates a new instance in mixes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mixes.createMany = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::createMany::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#destroyAll
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Deletes all mixes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.mixes.destroyAll = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::delete::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#destroyById
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Delete a related item by id for mixes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for mixes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.mixes.destroyById = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::destroyById::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#findById
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Find a related item by id for mixes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for mixes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mixes.findById = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::findById::Account::mixes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.mixes#updateById
         * @methodOf lbServices.Account.mixes
         *
         * @description
         *
         * Update a related item by id for mixes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for mixes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mixes.updateById = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::updateById::Account::mixes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.musics
     * @header lbServices.Account.musics
     * @object
     * @description
     *
     * The object `Account.musics` groups methods
     * manipulating `Music` instances related to `Account`.
     *
     * Call {@link lbServices.Account#musics Account.musics()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#musics
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries musics of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.musics = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::get::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#count
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Counts musics of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.musics.count = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::count::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#create
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Creates a new instance in musics of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.musics.create = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::create::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#createMany
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Creates a new instance in musics of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.musics.createMany = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::createMany::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#destroyAll
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Deletes all musics of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.musics.destroyAll = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::delete::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#destroyById
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Delete a related item by id for musics.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for musics
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.musics.destroyById = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::destroyById::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#findById
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Find a related item by id for musics.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for musics
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.musics.findById = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::findById::Account::musics"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.musics#updateById
         * @methodOf lbServices.Account.musics
         *
         * @description
         *
         * Update a related item by id for musics.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for musics
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.musics.updateById = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::updateById::Account::musics"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.radioContents
     * @header lbServices.Account.radioContents
     * @object
     * @description
     *
     * The object `Account.radioContents` groups methods
     * manipulating `RadioContent` instances related to `Account`.
     *
     * Call {@link lbServices.Account#radioContents Account.radioContents()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#radioContents
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries radioContents of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::get::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#count
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Counts radioContents of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.radioContents.count = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::count::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#create
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Creates a new instance in radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.create = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::create::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#createMany
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Creates a new instance in radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.createMany = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::createMany::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#destroyAll
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Deletes all radioContents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioContents.destroyAll = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::delete::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#destroyById
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Delete a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioContents.destroyById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::destroyById::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#findById
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Find a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.findById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::findById::Account::radioContents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioContents#updateById
         * @methodOf lbServices.Account.radioContents
         *
         * @description
         *
         * Update a related item by id for radioContents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioContents
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContents.updateById = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::updateById::Account::radioContents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.feeds
     * @header lbServices.Account.feeds
     * @object
     * @description
     *
     * The object `Account.feeds` groups methods
     * manipulating `Feed` instances related to `Account`.
     *
     * Call {@link lbServices.Account#feeds Account.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#feeds
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries feeds of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::get::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#count
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Counts feeds of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.feeds.count = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::count::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#create
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::create::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#createMany
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::createMany::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#destroyAll
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Deletes all feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyAll = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::delete::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#destroyById
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Delete a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::destroyById::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#findById
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Find a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.findById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::findById::Account::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.feeds#updateById
         * @methodOf lbServices.Account.feeds
         *
         * @description
         *
         * Update a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feeds.updateById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::updateById::Account::feeds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.followers
     * @header lbServices.Account.followers
     * @object
     * @description
     *
     * The object `Account.followers` groups methods
     * manipulating `Follower` instances related to `Account`.
     *
     * Call {@link lbServices.Account#followers Account.followers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#followers
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries followers of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::get::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#count
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Counts followers of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.followers.count = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::count::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#create
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Creates a new instance in followers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.create = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::create::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#createMany
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Creates a new instance in followers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.createMany = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::createMany::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#destroyAll
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Deletes all followers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.followers.destroyAll = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::delete::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#destroyById
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Delete a related item by id for followers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.followers.destroyById = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::destroyById::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#exists
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Check the existence of followers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.exists = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::exists::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#findById
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Find a related item by id for followers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.findById = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::findById::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#link
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Add a related item by id for followers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.link = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::link::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#unlink
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Remove the followers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.followers.unlink = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::unlink::Account::followers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.followers#updateById
         * @methodOf lbServices.Account.followers
         *
         * @description
         *
         * Update a related item by id for followers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Follower` object.)
         * </em>
         */
        R.followers.updateById = function() {
          var TargetResource = $injector.get("Follower");
          var action = TargetResource["::updateById::Account::followers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.likedFeed
     * @header lbServices.Account.likedFeed
     * @object
     * @description
     *
     * The object `Account.likedFeed` groups methods
     * manipulating `Feed` instances related to `Account`.
     *
     * Call {@link lbServices.Account#likedFeed Account.likedFeed()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#likedFeed
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries likedFeed of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::get::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#count
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Counts likedFeed of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likedFeed.count = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::count::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#create
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Creates a new instance in likedFeed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.create = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::create::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#createMany
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Creates a new instance in likedFeed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.createMany = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::createMany::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#destroyAll
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Deletes all likedFeed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedFeed.destroyAll = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::delete::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#destroyById
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Delete a related item by id for likedFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedFeed.destroyById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::destroyById::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#exists
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Check the existence of likedFeed relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.exists = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::exists::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#findById
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Find a related item by id for likedFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.findById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::findById::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#link
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Add a related item by id for likedFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.link = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::link::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#unlink
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Remove the likedFeed relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedFeed.unlink = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::unlink::Account::likedFeed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedFeed#updateById
         * @methodOf lbServices.Account.likedFeed
         *
         * @description
         *
         * Update a related item by id for likedFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedFeed
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.likedFeed.updateById = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::updateById::Account::likedFeed"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.radio
     * @header lbServices.Account.radio
     * @object
     * @description
     *
     * The object `Account.radio` groups methods
     * manipulating `Radio` instances related to `Account`.
     *
     * Call {@link lbServices.Account#radio Account.radio()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#radio
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Fetches hasOne relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Account::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radio#create
         * @methodOf lbServices.Account.radio
         *
         * @description
         *
         * Creates a new instance in radio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio.create = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::create::Account::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radio#createMany
         * @methodOf lbServices.Account.radio
         *
         * @description
         *
         * Creates a new instance in radio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio.createMany = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::createMany::Account::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radio#destroy
         * @methodOf lbServices.Account.radio
         *
         * @description
         *
         * Deletes radio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radio.destroy = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::destroy::Account::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radio#update
         * @methodOf lbServices.Account.radio
         *
         * @description
         *
         * Update radio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio.update = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::update::Account::radio"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.favorites
     * @header lbServices.Account.favorites
     * @object
     * @description
     *
     * The object `Account.favorites` groups methods
     * manipulating `Favorite` instances related to `Account`.
     *
     * Call {@link lbServices.Account#favorites Account.favorites()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#favorites
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries favorites of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R.favorites = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::get::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#count
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Counts favorites of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.favorites.count = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::count::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#create
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Creates a new instance in favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R.favorites.create = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::create::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#createMany
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Creates a new instance in favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R.favorites.createMany = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::createMany::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#destroyAll
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Deletes all favorites of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.favorites.destroyAll = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::delete::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#destroyById
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Delete a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.favorites.destroyById = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::destroyById::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#findById
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Find a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R.favorites.findById = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::findById::Account::favorites"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.favorites#updateById
         * @methodOf lbServices.Account.favorites
         *
         * @description
         *
         * Update a related item by id for favorites.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for favorites
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R.favorites.updateById = function() {
          var TargetResource = $injector.get("Favorite");
          var action = TargetResource["::updateById::Account::favorites"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.notifications
     * @header lbServices.Account.notifications
     * @object
     * @description
     *
     * The object `Account.notifications` groups methods
     * manipulating `Notification` instances related to `Account`.
     *
     * Call {@link lbServices.Account#notifications Account.notifications()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#notifications
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries notifications of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::get::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#count
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Counts notifications of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.notifications.count = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::count::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#create
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Creates a new instance in notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.create = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::create::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#createMany
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Creates a new instance in notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.createMany = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::createMany::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#destroyAll
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Deletes all notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.notifications.destroyAll = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::delete::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#destroyById
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Delete a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.notifications.destroyById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::destroyById::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#findById
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Find a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.findById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::findById::Account::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.notifications#updateById
         * @methodOf lbServices.Account.notifications
         *
         * @description
         *
         * Update a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.updateById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::updateById::Account::notifications"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.uploads
     * @header lbServices.Account.uploads
     * @object
     * @description
     *
     * The object `Account.uploads` groups methods
     * manipulating `Upload` instances related to `Account`.
     *
     * Call {@link lbServices.Account#uploads Account.uploads()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#uploads
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries uploads of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.uploads = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::get::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#count
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Counts uploads of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.uploads.count = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::count::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#create
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Creates a new instance in uploads of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.uploads.create = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::create::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#createMany
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Creates a new instance in uploads of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.uploads.createMany = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::createMany::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#destroyAll
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Deletes all uploads of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.uploads.destroyAll = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::delete::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#destroyById
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Delete a related item by id for uploads.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for uploads
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.uploads.destroyById = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::destroyById::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#findById
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Find a related item by id for uploads.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for uploads
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.uploads.findById = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::findById::Account::uploads"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.uploads#updateById
         * @methodOf lbServices.Account.uploads
         *
         * @description
         *
         * Update a related item by id for uploads.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for uploads
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.uploads.updateById = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::updateById::Account::uploads"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.setting
     * @header lbServices.Account.setting
     * @object
     * @description
     *
     * The object `Account.setting` groups methods
     * manipulating `AccountSetting` instances related to `Account`.
     *
     * Call {@link lbServices.Account#setting Account.setting()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#setting
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Fetches hasOne relation setting.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R.setting = function() {
          var TargetResource = $injector.get("AccountSetting");
          var action = TargetResource["::get::Account::setting"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.setting#create
         * @methodOf lbServices.Account.setting
         *
         * @description
         *
         * Creates a new instance in setting of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R.setting.create = function() {
          var TargetResource = $injector.get("AccountSetting");
          var action = TargetResource["::create::Account::setting"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.setting#createMany
         * @methodOf lbServices.Account.setting
         *
         * @description
         *
         * Creates a new instance in setting of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R.setting.createMany = function() {
          var TargetResource = $injector.get("AccountSetting");
          var action = TargetResource["::createMany::Account::setting"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.setting#destroy
         * @methodOf lbServices.Account.setting
         *
         * @description
         *
         * Deletes setting of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.setting.destroy = function() {
          var TargetResource = $injector.get("AccountSetting");
          var action = TargetResource["::destroy::Account::setting"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.setting#update
         * @methodOf lbServices.Account.setting
         *
         * @description
         *
         * Update setting of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R.setting.update = function() {
          var TargetResource = $injector.get("AccountSetting");
          var action = TargetResource["::update::Account::setting"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.likedRadio
     * @header lbServices.Account.likedRadio
     * @object
     * @description
     *
     * The object `Account.likedRadio` groups methods
     * manipulating `Radio` instances related to `Account`.
     *
     * Call {@link lbServices.Account#likedRadio Account.likedRadio()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#likedRadio
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries likedRadio of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#count
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Counts likedRadio of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likedRadio.count = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::count::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#create
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Creates a new instance in likedRadio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.create = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::create::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#createMany
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Creates a new instance in likedRadio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.createMany = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::createMany::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#destroyAll
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Deletes all likedRadio of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedRadio.destroyAll = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::delete::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#destroyById
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Delete a related item by id for likedRadio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedRadio.destroyById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::destroyById::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#exists
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Check the existence of likedRadio relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.exists = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::exists::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#findById
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Find a related item by id for likedRadio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.findById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::findById::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#link
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Add a related item by id for likedRadio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.link = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::link::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#unlink
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Remove the likedRadio relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likedRadio.unlink = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::unlink::Account::likedRadio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.likedRadio#updateById
         * @methodOf lbServices.Account.likedRadio
         *
         * @description
         *
         * Update a related item by id for likedRadio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likedRadio
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.likedRadio.updateById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::updateById::Account::likedRadio"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.radioMemberships
     * @header lbServices.Account.radioMemberships
     * @object
     * @description
     *
     * The object `Account.radioMemberships` groups methods
     * manipulating `Radio` instances related to `Account`.
     *
     * Call {@link lbServices.Account#radioMemberships Account.radioMemberships()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#radioMemberships
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries radioMemberships of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#count
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Counts radioMemberships of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.radioMemberships.count = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::count::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#create
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Creates a new instance in radioMemberships of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.create = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::create::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#createMany
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Creates a new instance in radioMemberships of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.createMany = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::createMany::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#destroyAll
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Deletes all radioMemberships of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioMemberships.destroyAll = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::delete::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#destroyById
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Delete a related item by id for radioMemberships.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioMemberships.destroyById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::destroyById::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#exists
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Check the existence of radioMemberships relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.exists = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::exists::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#findById
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Find a related item by id for radioMemberships.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.findById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::findById::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#link
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Add a related item by id for radioMemberships.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.link = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::link::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#unlink
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Remove the radioMemberships relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.radioMemberships.unlink = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::unlink::Account::radioMemberships"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.radioMemberships#updateById
         * @methodOf lbServices.Account.radioMemberships
         *
         * @description
         *
         * Update a related item by id for radioMemberships.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for radioMemberships
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radioMemberships.updateById = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::updateById::Account::radioMemberships"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Account.ratings
     * @header lbServices.Account.ratings
     * @object
     * @description
     *
     * The object `Account.ratings` groups methods
     * manipulating `Program` instances related to `Account`.
     *
     * Call {@link lbServices.Account#ratings Account.ratings()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Account#ratings
         * @methodOf lbServices.Account
         *
         * @description
         *
         * Queries ratings of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#count
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Counts ratings of Account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.ratings.count = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::count::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#create
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Creates a new instance in ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.create = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::create::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#createMany
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Creates a new instance in ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.createMany = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::createMany::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#destroyAll
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Deletes all ratings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.destroyAll = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::delete::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#destroyById
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Delete a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.destroyById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::destroyById::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#exists
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Check the existence of ratings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.exists = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::exists::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#findById
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Find a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.findById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::findById::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#link
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Add a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.link = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::link::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#unlink
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Remove the ratings relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.ratings.unlink = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::unlink::Account::ratings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Account.ratings#updateById
         * @methodOf lbServices.Account.ratings
         *
         * @description
         *
         * Update a related item by id for ratings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for ratings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.ratings.updateById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::updateById::Account::ratings"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Favorite
 * @header lbServices.Favorite
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Favorite` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Favorite",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/favorites/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Favorite.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/favorites/:id/account",
          method: "GET"
        },

        // INTERNAL. Use Favorite.radioContent() instead.
        "prototype$__get__radioContent": {
          url: urlBase + "/favorites/:id/radioContent",
          method: "GET"
        },

        // INTERNAL. Use Favorite.playlist() instead.
        "prototype$__get__playlist": {
          url: urlBase + "/favorites/:id/playlist",
          method: "GET"
        },

        // INTERNAL. Use Favorite.mix() instead.
        "prototype$__get__mix": {
          url: urlBase + "/favorites/:id/mix",
          method: "GET"
        },

        // INTERNAL. Use Favorite.music() instead.
        "prototype$__get__music": {
          url: urlBase + "/favorites/:id/music",
          method: "GET"
        },

        // INTERNAL. Use Favorite.artist() instead.
        "prototype$__get__artist": {
          url: urlBase + "/favorites/:id/artist",
          method: "GET"
        },

        // INTERNAL. Use Favorite.album() instead.
        "prototype$__get__album": {
          url: urlBase + "/favorites/:id/album",
          method: "GET"
        },

        // INTERNAL. Use Favorite.upload() instead.
        "prototype$__get__upload": {
          url: urlBase + "/favorites/:id/upload",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#create
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/favorites",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#createMany
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/favorites",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#upsert
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/favorites",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#exists
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/favorites/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#findById
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/favorites/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#find
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/favorites",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#findOne
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/favorites/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#updateAll
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/favorites/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#deleteById
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/favorites/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#count
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/favorites/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#prototype$updateAttributes
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/favorites/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Favorite#createChangeStream
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/favorites/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Account.favorites.findById() instead.
        "::findById::Account::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.favorites.destroyById() instead.
        "::destroyById::Account::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.favorites.updateById() instead.
        "::updateById::Account::favorites": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/favorites/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.favorites() instead.
        "::get::Account::favorites": {
          isArray: true,
          url: urlBase + "/accounts/:id/favorites",
          method: "GET"
        },

        // INTERNAL. Use Account.favorites.create() instead.
        "::create::Account::favorites": {
          url: urlBase + "/accounts/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Account.favorites.createMany() instead.
        "::createMany::Account::favorites": {
          isArray: true,
          url: urlBase + "/accounts/:id/favorites",
          method: "POST"
        },

        // INTERNAL. Use Account.favorites.destroyAll() instead.
        "::delete::Account::favorites": {
          url: urlBase + "/accounts/:id/favorites",
          method: "DELETE"
        },

        // INTERNAL. Use Account.favorites.count() instead.
        "::count::Account::favorites": {
          url: urlBase + "/accounts/:id/favorites/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Favorite#updateOrCreate
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Favorite#update
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Favorite#destroyById
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Favorite#removeById
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Favorite` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Favorite#modelName
    * @propertyOf lbServices.Favorite
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Favorite`.
    */
    R.modelName = "Favorite";


        /**
         * @ngdoc method
         * @name lbServices.Favorite#account
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Favorite::account"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#radioContent
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation radioContent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContent = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::get::Favorite::radioContent"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#playlist
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation playlist.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlist = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::get::Favorite::playlist"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#mix
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation mix.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Mix` object.)
         * </em>
         */
        R.mix = function() {
          var TargetResource = $injector.get("Mix");
          var action = TargetResource["::get::Favorite::mix"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#music
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation music.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.music = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::get::Favorite::music"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#artist
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation artist.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Artist` object.)
         * </em>
         */
        R.artist = function() {
          var TargetResource = $injector.get("Artist");
          var action = TargetResource["::get::Favorite::artist"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#album
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation album.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Album` object.)
         * </em>
         */
        R.album = function() {
          var TargetResource = $injector.get("Album");
          var action = TargetResource["::get::Favorite::album"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Favorite#upload
         * @methodOf lbServices.Favorite
         *
         * @description
         *
         * Fetches belongsTo relation upload.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.upload = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::get::Favorite::upload"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Notification
 * @header lbServices.Notification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Notification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Notification",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Notifications/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Notification.feed() instead.
        "prototype$__get__feed": {
          url: urlBase + "/Notifications/:id/feed",
          method: "GET"
        },

        // INTERNAL. Use Notification.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/Notifications/:id/account",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#create
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Notifications",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#createMany
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/Notifications",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#upsert
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Notifications",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#exists
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Notifications/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#findById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Notifications/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#find
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Notifications",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#findOne
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Notifications/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#updateAll
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/Notifications/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#deleteById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/Notifications/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#count
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Notifications/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#prototype$updateAttributes
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Notifications/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#createChangeStream
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/Notifications/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Account.notifications.findById() instead.
        "::findById::Account::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.notifications.destroyById() instead.
        "::destroyById::Account::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.notifications.updateById() instead.
        "::updateById::Account::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/notifications/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.notifications() instead.
        "::get::Account::notifications": {
          isArray: true,
          url: urlBase + "/accounts/:id/notifications",
          method: "GET"
        },

        // INTERNAL. Use Account.notifications.create() instead.
        "::create::Account::notifications": {
          url: urlBase + "/accounts/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use Account.notifications.createMany() instead.
        "::createMany::Account::notifications": {
          isArray: true,
          url: urlBase + "/accounts/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use Account.notifications.destroyAll() instead.
        "::delete::Account::notifications": {
          url: urlBase + "/accounts/:id/notifications",
          method: "DELETE"
        },

        // INTERNAL. Use Account.notifications.count() instead.
        "::count::Account::notifications": {
          url: urlBase + "/accounts/:id/notifications/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Notification#updateOrCreate
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#update
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#destroyById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#removeById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Notification#modelName
    * @propertyOf lbServices.Notification
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Notification`.
    */
    R.modelName = "Notification";


        /**
         * @ngdoc method
         * @name lbServices.Notification#feed
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Fetches belongsTo relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Feed` object.)
         * </em>
         */
        R.feed = function() {
          var TargetResource = $injector.get("Feed");
          var action = TargetResource["::get::Notification::feed"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Notification#account
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Notification::account"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Upload
 * @header lbServices.Upload
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Upload` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Upload",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/uploads/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Upload#findById
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/uploads/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#find
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/uploads",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#deleteById
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/uploads/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#prototype$updateAttributes
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/uploads/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#getUploaded
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * List current user's uploaded files
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "getUploaded": {
          isArray: true,
          url: urlBase + "/uploads/list",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#upload
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Upload a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        "upload": {
          url: urlBase + "/uploads",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#report
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Report uploaded files that violated rules
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "report": {
          url: urlBase + "/uploads/report",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#share
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Share an upload by ID to users within usersId array
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         *  - `data` – `{object}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "share": {
          url: urlBase + "/uploads/share/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#favorite
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Favorite an upload by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "favorite": {
          url: urlBase + "/uploads/favorite/:id",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Upload#unfavorite
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Unfavorite an upload by ID
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `message` – `{string=}` - 
         */
        "unfavorite": {
          url: urlBase + "/uploads/favorite/:id",
          method: "DELETE"
        },

        // INTERNAL. Use Content.upload() instead.
        "::get::Content::upload": {
          url: urlBase + "/contents/:id/upload",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads.findById() instead.
        "::findById::Account::uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads.destroyById() instead.
        "::destroyById::Account::uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Account.uploads.updateById() instead.
        "::updateById::Account::uploads": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/accounts/:id/uploads/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Account.uploads() instead.
        "::get::Account::uploads": {
          isArray: true,
          url: urlBase + "/accounts/:id/uploads",
          method: "GET"
        },

        // INTERNAL. Use Account.uploads.create() instead.
        "::create::Account::uploads": {
          url: urlBase + "/accounts/:id/uploads",
          method: "POST"
        },

        // INTERNAL. Use Account.uploads.createMany() instead.
        "::createMany::Account::uploads": {
          isArray: true,
          url: urlBase + "/accounts/:id/uploads",
          method: "POST"
        },

        // INTERNAL. Use Account.uploads.destroyAll() instead.
        "::delete::Account::uploads": {
          url: urlBase + "/accounts/:id/uploads",
          method: "DELETE"
        },

        // INTERNAL. Use Account.uploads.count() instead.
        "::count::Account::uploads": {
          url: urlBase + "/accounts/:id/uploads/count",
          method: "GET"
        },

        // INTERNAL. Use Favorite.upload() instead.
        "::get::Favorite::upload": {
          url: urlBase + "/favorites/:id/upload",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.upload() instead.
        "::get::PlaylistContents::upload": {
          url: urlBase + "/playlist_contents/:id/upload",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Upload#destroyById
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Upload#removeById
         * @methodOf lbServices.Upload
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Upload#modelName
    * @propertyOf lbServices.Upload
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Upload`.
    */
    R.modelName = "Upload";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.AccountSetting
 * @header lbServices.AccountSetting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccountSetting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AccountSetting",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/settings/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use AccountSetting.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/settings/:id/account",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#create
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/settings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#createMany
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/settings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#upsert
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/settings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#exists
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/settings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#findById
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/settings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#find
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/settings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#findOne
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/settings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#updateAll
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/settings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#deleteById
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/settings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#count
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/settings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#prototype$updateAttributes
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/settings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#createChangeStream
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/settings/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Account.setting() instead.
        "::get::Account::setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "GET"
        },

        // INTERNAL. Use Account.setting.create() instead.
        "::create::Account::setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "POST"
        },

        // INTERNAL. Use Account.setting.createMany() instead.
        "::createMany::Account::setting": {
          isArray: true,
          url: urlBase + "/accounts/:id/setting",
          method: "POST"
        },

        // INTERNAL. Use Account.setting.update() instead.
        "::update::Account::setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "PUT"
        },

        // INTERNAL. Use Account.setting.destroy() instead.
        "::destroy::Account::setting": {
          url: urlBase + "/accounts/:id/setting",
          method: "DELETE"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#updateOrCreate
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#update
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#destroyById
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#removeById
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccountSetting` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.AccountSetting#modelName
    * @propertyOf lbServices.AccountSetting
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AccountSetting`.
    */
    R.modelName = "AccountSetting";


        /**
         * @ngdoc method
         * @name lbServices.AccountSetting#account
         * @methodOf lbServices.AccountSetting
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::AccountSetting::account"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainers
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#destroyContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFiles
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#removeFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#upload
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#download
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Container#modelName
    * @propertyOf lbServices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.RadioLike
 * @header lbServices.RadioLike
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RadioLike` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "RadioLike",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/radiolikes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use RadioLike.radio() instead.
        "prototype$__get__radio": {
          url: urlBase + "/radiolikes/:id/radio",
          method: "GET"
        },

        // INTERNAL. Use RadioLike.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/radiolikes/:id/account",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#create
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/radiolikes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#createMany
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/radiolikes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#upsert
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/radiolikes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#exists
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/radiolikes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#findById
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/radiolikes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#find
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/radiolikes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#findOne
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/radiolikes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#updateAll
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/radiolikes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#deleteById
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/radiolikes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#count
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/radiolikes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#prototype$updateAttributes
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/radiolikes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#createChangeStream
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/radiolikes/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.RadioLike#updateOrCreate
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#update
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#destroyById
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#removeById
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioLike` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.RadioLike#modelName
    * @propertyOf lbServices.RadioLike
    * @description
    * The name of the model represented by this $resource,
    * i.e. `RadioLike`.
    */
    R.modelName = "RadioLike";


        /**
         * @ngdoc method
         * @name lbServices.RadioLike#radio
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Fetches belongsTo relation radio.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Radio` object.)
         * </em>
         */
        R.radio = function() {
          var TargetResource = $injector.get("Radio");
          var action = TargetResource["::get::RadioLike::radio"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.RadioLike#account
         * @methodOf lbServices.RadioLike
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::RadioLike::account"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Advertisement
 * @header lbServices.Advertisement
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Advertisement` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Advertisement",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/advertisements/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#create
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/advertisements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#createMany
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/advertisements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#upsert
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/advertisements",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#exists
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/advertisements/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#findById
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/advertisements/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#find
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/advertisements",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#findOne
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/advertisements/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#updateAll
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/advertisements/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#deleteById
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/advertisements/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#count
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/advertisements/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#prototype$updateAttributes
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/advertisements/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#createChangeStream
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/advertisements/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Advertisement#updateOrCreate
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#update
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#destroyById
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Advertisement#removeById
         * @methodOf lbServices.Advertisement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Advertisement` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Advertisement#modelName
    * @propertyOf lbServices.Advertisement
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Advertisement`.
    */
    R.modelName = "Advertisement";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.RadioMembership
 * @header lbServices.RadioMembership
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RadioMembership` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "RadioMembership",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/RadioMemberships/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#create
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/RadioMemberships",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#createMany
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/RadioMemberships",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#upsert
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/RadioMemberships",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#exists
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/RadioMemberships/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#findById
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/RadioMemberships/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#find
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/RadioMemberships",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#findOne
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/RadioMemberships/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#updateAll
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/RadioMemberships/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#deleteById
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/RadioMemberships/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#count
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/RadioMemberships/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#prototype$updateAttributes
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/RadioMemberships/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#createChangeStream
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/RadioMemberships/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#updateOrCreate
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#update
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#destroyById
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.RadioMembership#removeById
         * @methodOf lbServices.RadioMembership
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioMembership` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.RadioMembership#modelName
    * @propertyOf lbServices.RadioMembership
    * @description
    * The name of the model represented by this $resource,
    * i.e. `RadioMembership`.
    */
    R.modelName = "RadioMembership";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Rating
 * @header lbServices.Rating
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Rating` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Rating",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/ratings/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Rating.program() instead.
        "prototype$__get__program": {
          url: urlBase + "/ratings/:id/program",
          method: "GET"
        },

        // INTERNAL. Use Rating.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/ratings/:id/account",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#create
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/ratings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#createMany
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/ratings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#upsert
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/ratings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#exists
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/ratings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#findById
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/ratings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#find
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/ratings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#findOne
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/ratings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#updateAll
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/ratings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#deleteById
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/ratings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#count
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/ratings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#prototype$updateAttributes
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/ratings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Rating#createChangeStream
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/ratings/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Rating#updateOrCreate
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Rating#update
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Rating#destroyById
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Rating#removeById
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Rating` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Rating#modelName
    * @propertyOf lbServices.Rating
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Rating`.
    */
    R.modelName = "Rating";


        /**
         * @ngdoc method
         * @name lbServices.Rating#program
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Fetches belongsTo relation program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.program = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::Rating::program"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Rating#account
         * @methodOf lbServices.Rating
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::Rating::account"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.ProgramComment
 * @header lbServices.ProgramComment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ProgramComment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "ProgramComment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/programcomments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use ProgramComment.account() instead.
        "prototype$__get__account": {
          url: urlBase + "/programcomments/:id/account",
          method: "GET"
        },

        // INTERNAL. Use ProgramComment.program() instead.
        "prototype$__get__program": {
          url: urlBase + "/programcomments/:id/program",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#create
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/programcomments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#createMany
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/programcomments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#upsert
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/programcomments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#exists
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/programcomments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#findById
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/programcomments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#find
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/programcomments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#findOne
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/programcomments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#updateAll
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/programcomments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#deleteById
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/programcomments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#count
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/programcomments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#prototype$updateAttributes
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/programcomments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#createChangeStream
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/programcomments/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Program.comments.findById() instead.
        "::findById::Program::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.comments.destroyById() instead.
        "::destroyById::Program::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.comments.updateById() instead.
        "::updateById::Program::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.comments() instead.
        "::get::Program::comments": {
          isArray: true,
          url: urlBase + "/programs/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Program.comments.create() instead.
        "::create::Program::comments": {
          url: urlBase + "/programs/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Program.comments.createMany() instead.
        "::createMany::Program::comments": {
          isArray: true,
          url: urlBase + "/programs/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Program.comments.destroyAll() instead.
        "::delete::Program::comments": {
          url: urlBase + "/programs/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Program.comments.count() instead.
        "::count::Program::comments": {
          url: urlBase + "/programs/:id/comments/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#updateOrCreate
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#update
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#destroyById
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#removeById
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProgramComment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.ProgramComment#modelName
    * @propertyOf lbServices.ProgramComment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `ProgramComment`.
    */
    R.modelName = "ProgramComment";


        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#account
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Fetches belongsTo relation account.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Account` object.)
         * </em>
         */
        R.account = function() {
          var TargetResource = $injector.get("Account");
          var action = TargetResource["::get::ProgramComment::account"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.ProgramComment#program
         * @methodOf lbServices.ProgramComment
         *
         * @description
         *
         * Fetches belongsTo relation program.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.program = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::ProgramComment::program"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Announcer
 * @header lbServices.Announcer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Announcer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Announcer",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/announcers/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Announcer.programs.findById() instead.
        "prototype$__findById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "GET"
        },

        // INTERNAL. Use Announcer.programs.destroyById() instead.
        "prototype$__destroyById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.updateById() instead.
        "prototype$__updateById__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Announcer.programs.link() instead.
        "prototype$__link__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Announcer.programs.unlink() instead.
        "prototype$__unlink__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.exists() instead.
        "prototype$__exists__programs": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/announcers/:id/programs/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Announcer.programs() instead.
        "prototype$__get__programs": {
          isArray: true,
          url: urlBase + "/announcers/:id/programs",
          method: "GET"
        },

        // INTERNAL. Use Announcer.programs.create() instead.
        "prototype$__create__programs": {
          url: urlBase + "/announcers/:id/programs",
          method: "POST"
        },

        // INTERNAL. Use Announcer.programs.destroyAll() instead.
        "prototype$__delete__programs": {
          url: urlBase + "/announcers/:id/programs",
          method: "DELETE"
        },

        // INTERNAL. Use Announcer.programs.count() instead.
        "prototype$__count__programs": {
          url: urlBase + "/announcers/:id/programs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#create
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/announcers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#createMany
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/announcers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#upsert
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/announcers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#exists
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/announcers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#findById
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/announcers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#find
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/announcers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#findOne
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/announcers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#updateAll
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/announcers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#deleteById
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/announcers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#count
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/announcers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#prototype$updateAttributes
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/announcers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Announcer#createChangeStream
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/announcers/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Program.announcers.findById() instead.
        "::findById::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Program.announcers.destroyById() instead.
        "::destroyById::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.updateById() instead.
        "::updateById::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.announcers.link() instead.
        "::link::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Program.announcers.unlink() instead.
        "::unlink::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.exists() instead.
        "::exists::Program::announcers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/programs/:id/announcers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Program.announcers() instead.
        "::get::Program::announcers": {
          isArray: true,
          url: urlBase + "/programs/:id/announcers",
          method: "GET"
        },

        // INTERNAL. Use Program.announcers.create() instead.
        "::create::Program::announcers": {
          url: urlBase + "/programs/:id/announcers",
          method: "POST"
        },

        // INTERNAL. Use Program.announcers.createMany() instead.
        "::createMany::Program::announcers": {
          isArray: true,
          url: urlBase + "/programs/:id/announcers",
          method: "POST"
        },

        // INTERNAL. Use Program.announcers.destroyAll() instead.
        "::delete::Program::announcers": {
          url: urlBase + "/programs/:id/announcers",
          method: "DELETE"
        },

        // INTERNAL. Use Program.announcers.count() instead.
        "::count::Program::announcers": {
          url: urlBase + "/programs/:id/announcers/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Announcer#updateOrCreate
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Announcer#update
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Announcer#destroyById
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Announcer#removeById
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Announcer` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Announcer#modelName
    * @propertyOf lbServices.Announcer
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Announcer`.
    */
    R.modelName = "Announcer";

    /**
     * @ngdoc object
     * @name lbServices.Announcer.programs
     * @header lbServices.Announcer.programs
     * @object
     * @description
     *
     * The object `Announcer.programs` groups methods
     * manipulating `Program` instances related to `Announcer`.
     *
     * Call {@link lbServices.Announcer#programs Announcer.programs()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Announcer#programs
         * @methodOf lbServices.Announcer
         *
         * @description
         *
         * Queries programs of Announcer.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::get::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#count
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Counts programs of Announcer.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.programs.count = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::count::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#create
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Creates a new instance in programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.create = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::create::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#createMany
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Creates a new instance in programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.createMany = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::createMany::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#destroyAll
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Deletes all programs of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.programs.destroyAll = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::delete::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#destroyById
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Delete a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.programs.destroyById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::destroyById::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#exists
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Check the existence of programs relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.exists = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::exists::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#findById
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Find a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.findById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::findById::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#link
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Add a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.link = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::link::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#unlink
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Remove the programs relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.programs.unlink = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::unlink::Announcer::programs"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Announcer.programs#updateById
         * @methodOf lbServices.Announcer.programs
         *
         * @description
         *
         * Update a related item by id for programs.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for programs
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Program` object.)
         * </em>
         */
        R.programs.updateById = function() {
          var TargetResource = $injector.get("Program");
          var action = TargetResource["::updateById::Announcer::programs"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.PlaylistContents
 * @header lbServices.PlaylistContents
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PlaylistContents` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "PlaylistContents",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/playlist_contents/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use PlaylistContents.playlist() instead.
        "prototype$__get__playlist": {
          url: urlBase + "/playlist_contents/:id/playlist",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.music() instead.
        "prototype$__get__music": {
          url: urlBase + "/playlist_contents/:id/music",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.upload() instead.
        "prototype$__get__upload": {
          url: urlBase + "/playlist_contents/:id/upload",
          method: "GET"
        },

        // INTERNAL. Use PlaylistContents.radioContent() instead.
        "prototype$__get__radioContent": {
          url: urlBase + "/playlist_contents/:id/radioContent",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#create
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/playlist_contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#createMany
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/playlist_contents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#upsert
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/playlist_contents",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#exists
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/playlist_contents/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#findById
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/playlist_contents/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#find
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/playlist_contents",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#findOne
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/playlist_contents/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#updateAll
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/playlist_contents/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#deleteById
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/playlist_contents/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#count
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/playlist_contents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#prototype$updateAttributes
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/playlist_contents/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#createChangeStream
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/playlist_contents/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#updateOrCreate
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#update
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#destroyById
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#removeById
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlaylistContents` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.PlaylistContents#modelName
    * @propertyOf lbServices.PlaylistContents
    * @description
    * The name of the model represented by this $resource,
    * i.e. `PlaylistContents`.
    */
    R.modelName = "PlaylistContents";


        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#playlist
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Fetches belongsTo relation playlist.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Playlist` object.)
         * </em>
         */
        R.playlist = function() {
          var TargetResource = $injector.get("Playlist");
          var action = TargetResource["::get::PlaylistContents::playlist"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#music
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Fetches belongsTo relation music.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Music` object.)
         * </em>
         */
        R.music = function() {
          var TargetResource = $injector.get("Music");
          var action = TargetResource["::get::PlaylistContents::music"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#upload
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Fetches belongsTo relation upload.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Upload` object.)
         * </em>
         */
        R.upload = function() {
          var TargetResource = $injector.get("Upload");
          var action = TargetResource["::get::PlaylistContents::upload"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.PlaylistContents#radioContent
         * @methodOf lbServices.PlaylistContents
         *
         * @description
         *
         * Fetches belongsTo relation radioContent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RadioContent` object.)
         * </em>
         */
        R.radioContent = function() {
          var TargetResource = $injector.get("RadioContent");
          var action = TargetResource["::get::PlaylistContents::radioContent"];
          return action.apply(R, arguments);
        };

    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      var key = propsPrefix + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out non urlBase requests
          if (config.url.substr(0, urlBase.length) !== urlBase) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);
